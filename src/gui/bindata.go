// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3c\x6b\x8f\xdb\x38\x92\xdf\x17\xd8\xff\xc0\x28\x18\xd8\x9e\x48\xb4\xa8\xb7\x1c\x3b\xc0\x6e\x4f\x06\x09\x2e\x73\xdb\x40\x06\x0b\x1c\x0e\x87\x06\x2d\xd1\x36\x11\x5a\xd4\x49\xb4\xdb\x4e\x90\xff\x7e\x20\x25\xb9\x65\xb7\x28\xcb\x3d\x13\xec\x9e\x1a\xb0\x1e\x2c\x16\x8b\xf5\x2e\x8a\xea\xf9\xab\x94\x27\xe2\x98\x13\xb0\x11\x5b\xf6\xee\xaf\x7f\x99\xd7\x67\x00\x00\x98\x6f\x08\x4e\xeb\xeb\xe6\x98\x97\xe2\xc8\xc8\xc5\x43\x79\xc0\xc7\x02\xe7\x39\x29\xc0\xb7\xe7\x6d\xf2\x78\xa4\xa9\xd8\xcc\x00\x0a\xed\xfc\xf0\x16\x4c\x7f\x06\x9f\x89\x00\x62\x43\x40\x49\xbf\x12\xc0\x57\xea\x3a\x2f\xf8\xba\x20\x65\x09\x96\xb8\x00\x3f\x4f\xbb\x31\x6d\x08\x5d\x6f\x44\x83\xaa\x1b\xe6\xab\x45\xb3\x94\x1c\x66\x00\x39\xb6\x1e\x2a\xe7\x25\x15\x94\x67\x33\x80\x97\x25\x67\x3b\x41\x14\x65\xef\x33\xbc\x64\x04\x24\x8c\xe6\x39\xcd\xd6\x5a\x42\x24\xc0\x0c\x14\x24\x11\x63\x3b\x3f\x98\x00\xf9\xed\x53\xe8\xe7\x87\x89\xc2\xf7\x81\xa6\x04\x6c\x30\x5b\xdd\x34\xcd\xef\xdd\x8f\x2f\x38\x57\x36\x38\x09\x23\x5b\x92\x89\x12\x88\x0d\x16\x60\x8b\xbf\x10\xb0\xcb\x87\x8d\x06\x13\x5a\x24\x8c\xe8\x24\x37\x8c\x97\x8d\x7c\x5d\x3d\xc8\x49\x70\x3d\x30\x4b\x5e\xa4\xa4\x98\x01\x64\xe7\x07\x50\x72\x46\x53\xf0\x3a\x8a\xee\x6c\x3f\xec\xed\x60\x15\x38\xa5\xbb\x72\x06\x62\xf7\x16\x69\x0f\x93\xab\x94\xe4\x49\xac\xb6\x94\xaa\x56\x34\xa2\xc0\x59\x33\x8a\xba\x5e\xf1\x62\x0b\x80\x0d\xdd\xf2\xad\x56\xd2\x4d\x3f\x09\x3b\x03\x05\x17\x58\x90\xb1\x9d\x92\xf5\x44\xdf\xe7\x42\x3b\xe6\xd3\x2e\xbb\xd4\x1a\xeb\x92\xa7\x47\x8d\xb4\x97\x38\xf9\xb2\x2e\xf8\x2e\x4b\x67\xe0\xb5\xf3\xab\x1b\x7a\x7f\xeb\x97\xb8\xdb\xa3\x14\x2b\x9e\x09\x6b\x85\xb7\x94\x1d\x67\xe0\x6f\x05\xc5\xcc\x04\x1f\x08\xdb\x13\x41\x13\x6c\x82\x12\x67\xa5\x55\x92\x82\xae\xfa\xfa\x4b\x35\x97\xca\xa7\x1d\x45\x90\x83\xb0\x30\xa3\xeb\x6c\x06\x12\x92\x09\x52\xe8\x34\x00\xa7\x29\xcd\xd6\x96\xe0\x79\xa5\x61\x3a\x05\xe0\x8c\x17\xb3\xd7\xc4\x96\x7f\x3a\x98\x5d\x51\xf2\x62\x96\x92\x15\xde\x31\xa1\x01\xb2\x1e\xc9\xf2\x0b\x15\x96\xe0\xbb\x64\x63\x25\x98\x31\xbe\x13\x33\x90\xf1\xac\xf2\x34\xf4\x1f\x9f\xc1\x67\xbc\xc2\x05\xd5\x0a\xba\x41\xb1\x2b\x49\x61\x95\x84\x91\xa4\x8d\xe0\x5a\xe7\x2f\xd2\x9d\x6b\xfa\xfe\x07\xcf\xfe\x77\x47\x0a\x5e\x80\x0f\xbf\xff\xf6\x49\x8f\x63\xcb\xbf\x6a\x30\xfc\x4a\x0b\xb2\xe2\x07\x6d\xd7\xaa\x7b\xa9\xe9\xfd\x51\x4a\x2a\x23\x02\xbc\x3f\xe4\x8c\x17\xa4\x98\xbe\x4f\xd7\xa4\x17\x99\x3c\xba\x91\xfd\x27\xcf\xac\xbc\x20\x2b\x7a\x20\x29\xd8\x93\xa2\xa4\x3c\x33\xa5\x90\x0a\x92\x09\x76\xec\x47\xd9\x75\x94\xbb\x3c\xe7\x85\x20\x29\x58\x1e\xc1\xdd\xa6\xe0\x5b\x02\x70\x96\x82\x7f\xe4\xa4\xc0\x9d\x44\x76\x38\xec\xe9\xcf\xe0\x77\x9e\x77\x42\xbf\xde\x1e\x3f\xde\x6b\x6c\xb0\xd1\xd3\x25\x17\x82\x6f\x67\xc0\xd1\xaa\xea\x20\x2a\x60\xcf\x50\x3c\xc7\x09\x15\xc7\x19\xb0\xa1\xdf\x31\xc4\x73\x6c\x9d\x93\xbc\x6f\x42\x4c\x77\x7c\x69\x22\xd0\x43\xc2\x33\x81\x69\x46\x8a\x2b\x49\x82\xaf\xb7\xcd\x2d\x2e\xd6\x54\xfa\xf0\x9d\xe0\xd7\xe2\x4c\x0f\x1a\xe9\x73\x79\x3e\xb3\xaa\x58\xd4\xe7\x9a\x9f\xc2\x46\x41\x18\x16\x74\x4f\x7a\xc1\xcf\xa2\xa5\x1e\xb2\x9a\x46\xed\x89\xa2\x3e\x32\xdb\x0e\xb9\x20\x69\x37\xca\xef\x7f\xfd\xcb\xf3\x87\x1d\x4a\x77\x92\x44\xce\xa9\x34\x3f\x8d\x1c\x56\x8c\x63\x31\x03\x85\xe4\xe3\x75\xd7\xec\xf8\xd7\x3c\xe9\x4a\x1d\x7d\x98\x1e\x6b\x99\x85\xb6\xce\xe1\x76\xc8\x41\x13\x0e\x78\x3e\x0b\xae\x25\x2a\x48\x6f\x53\xc3\xe3\x89\xe2\xcf\x0c\x75\x4f\x7f\xa0\x90\x20\xe3\x38\x25\xc5\x43\xb9\xc1\x29\x7f\xbc\x62\x17\x3d\x89\xd3\x00\xbb\x18\x9c\x00\x0d\x49\xd4\x5a\x7a\xae\x81\x60\x64\x25\x66\x91\x3e\x1f\x93\x72\xea\xb7\xd0\xb6\xea\x2f\xd9\xae\xc7\xf0\x2e\xb2\x40\xdf\xfe\x69\x78\x7e\x59\xac\x97\x78\x6c\x9b\xea\x0f\x22\x99\xdc\x0d\x14\x5d\x87\x88\xc1\xeb\x64\xc3\x79\x49\x7a\xed\x4a\xa9\xcd\x20\xcf\xdd\xa1\x2e\x32\x49\xbc\x12\x36\xfa\xd2\x9b\x61\x83\x64\xfc\xf1\x61\x45\x59\xf7\x34\x6a\x9b\x4e\x3c\xf9\xd7\xc9\xe6\xda\x7d\x48\x05\x78\x3b\x2c\x44\x75\x46\x95\x5f\x68\x41\x12\x5e\x1c\x35\x51\x25\x95\xcd\x82\x17\xc7\x87\xa1\x3c\xe9\x51\xe7\x17\x1b\x55\x6d\x9a\x4d\x69\x34\x2c\x20\x57\x4a\x92\x3d\x9c\xa6\xd0\xef\x87\x15\x23\x5f\x2a\x4b\x9c\xd1\x2d\x16\xe4\x79\x8b\x66\xcc\x76\x09\x83\x19\x03\x36\x44\xe5\xb5\xf4\x76\x58\x97\x2e\x4e\xe0\x44\x76\x7b\x58\xee\x84\xe0\x99\x86\xa2\x3a\xd5\x06\x75\xcc\xea\x15\xc4\x16\x1f\x2c\x99\x65\x90\x4c\x17\xb8\x52\x5a\xe6\x0c\x1f\x67\x80\x66\x8c\x66\x3a\x17\xf8\x3c\xcb\xec\x89\x15\xa9\x54\x53\x5c\xcd\x5f\x03\x7b\x75\xee\xb3\x0d\xdf\x6b\xe3\x71\x65\x72\x2a\xfc\x0f\x43\x2d\x2d\xe2\xa1\x22\xbf\x17\x65\x1d\x99\xe3\x2e\xbc\xe0\x22\x4d\xe9\x89\x98\x35\x98\xf2\xf8\xc0\xea\x8e\x87\x1d\x64\xbe\xae\x28\x7c\xa0\xf9\x95\xb8\xd7\x93\x61\x5c\x78\x7e\x07\xf6\x80\xb6\x4b\xdb\x1e\xf7\x75\x31\x9f\x3f\xe2\x49\x5f\x2f\xc9\x9a\xea\xf4\x7a\xfa\x73\x3b\xfd\x76\x87\x25\x8b\x3d\x52\x18\xc6\x73\x45\xd1\x43\xb9\x5f\x9b\x5d\x02\x11\x3c\xd7\xb5\x2d\x0b\x82\xbf\xc8\x46\xcd\x74\x2e\x0c\xcb\x5a\x32\x9e\x7c\xe9\xf7\x9a\x3d\xe1\xbf\xc9\x41\xae\x97\x02\x1a\xe7\xdc\x65\x16\x74\x8b\xd7\xa4\xdf\xd9\xdc\x4c\xd9\x40\x4d\xff\x33\x18\x7b\xa3\x6f\xd9\x5f\x99\x6a\x97\xdb\x06\x04\x97\xc4\xa2\x99\xc5\x77\x3a\x07\x3a\xcc\x1d\xb7\x34\x3b\xbe\xc2\xc8\x9e\xb0\x7c\x5a\x63\x1a\x6a\x82\xe7\x13\xef\x75\xaa\x27\x0a\xd1\x4b\x30\x57\x77\xba\x45\x34\x7e\xb0\xaa\x84\xbe\x37\x78\xb4\x78\x14\x0e\x53\x23\xcc\x48\xd1\xef\xd1\xbb\x63\x04\xb8\xa5\xac\x79\xaa\x9f\xaf\x39\xfc\x1b\x33\x4d\xc8\xb8\x4e\xc7\x65\xdc\x6e\xc6\xf5\x86\x95\x66\x9a\xac\x08\x9c\xd4\xa6\x6f\xb9\xba\xdf\x77\x80\x73\xe1\xb8\x3a\x90\x3d\x29\x56\x4c\x0a\x79\x43\xd3\x94\x64\x03\xa3\x5e\x41\x64\xcd\xf7\x40\xf3\xb2\xd7\x07\xf5\x78\xfa\x86\x53\x3d\x20\xc3\xd2\x9c\x9b\x8a\x6a\x4f\x3b\x98\x0a\x94\x3d\xab\x00\xb7\x7a\x8c\xe0\x66\x4e\x0e\xb3\x74\x1b\x46\xb7\x63\xee\xb5\xf4\x27\x27\x32\xd0\x04\x2a\xf7\xf1\x40\x93\x2b\x11\xe8\xe5\xd2\xef\x18\xf5\xfc\xf5\xc0\x7c\xda\x7a\xb1\x37\x5f\xf2\xf4\x78\xfe\x8a\xe0\xbc\xff\x3c\xa5\x7b\x90\x30\x5c\x96\x0b\x63\x7b\xfc\x78\x6f\xbc\xfb\x2f\xbe\x2b\xc0\xc7\xfb\x19\x98\x97\x39\xce\x00\x4d\x9b\x06\xe4\x84\xd0\x86\x36\x44\xf3\xa9\x6c\x79\x37\x9f\xa6\x74\x7f\xf9\x4e\xa2\x85\xee\x6c\xe9\xc3\xb8\x0a\xfe\x7c\x19\xd1\xe8\x78\xb7\xd1\xee\x51\xbf\x93\x34\x40\x8a\x05\xb6\x64\x25\xb4\x30\x96\xb8\x24\xe0\xd4\x20\x89\x6f\x6e\x3a\x90\x5d\x22\xac\xde\x94\x3d\xc7\x27\x0d\xa0\x42\x56\x41\x3c\xa8\x07\x9d\x33\xba\x05\xad\x5a\x29\x38\xc3\x5b\x3d\xd1\x22\xd6\x3e\x97\x83\x49\x34\x97\x0b\x80\xba\x49\xdb\x3f\x0d\x43\xde\xf1\x4c\x2f\xc0\xf3\x8a\xfd\x9a\xf0\x9e\x15\xc9\x3a\x5a\x7f\x69\x00\x5a\x1a\x39\x7a\xd6\x7b\xf4\x4e\x46\xe2\x5a\x33\x6f\xe4\x9c\x38\xe6\x64\x61\x54\xa6\x5b\x8b\x43\xa1\x37\x1a\x5a\xcf\x4a\x39\x1d\x9d\x77\xaa\xcf\xab\xdb\x19\xab\xe5\xe8\x48\xf2\x71\x74\x85\x8f\xad\x5a\x50\xab\xe2\x8a\x29\x9f\x49\x96\x02\xc1\x67\xa0\x66\x52\xdd\xa8\xeb\xa2\x30\x2a\x66\x9c\xca\x38\x1d\xfe\xaa\x07\xcf\x25\x93\xc0\x1e\xb3\x1d\x59\x18\x28\x76\x20\x0a\x22\x68\x43\xc7\x78\xf7\x74\x83\xe6\xd3\x0a\x4e\x47\xea\xb4\x1a\xad\xcf\xaa\x24\x4d\x4f\x0e\xbc\x8f\xa8\x79\xb9\x5f\x37\x7c\x6a\x79\x66\x03\x1c\xb6\x2c\x2b\x17\xc6\x46\x88\x7c\x36\x9d\x3e\x3e\x3e\xc2\x47\x17\xf2\x62\x3d\x75\x6c\xdb\x9e\x96\xfb\x75\x0d\x32\x3b\x30\x9a\x7d\xe9\x02\x44\x71\x1c\x4f\x55\xab\xd1\xbc\x90\x5a\x18\x08\xa2\x4a\x7f\xee\x70\x8e\x1f\x90\x01\x0e\x0b\xc3\xce\x0f\x06\x38\xd6\xe7\x3d\x25\x8f\x7f\xe7\xf2\x29\xb0\x81\x13\x41\x27\xf0\xeb\x93\x01\x94\x0f\x5f\x18\x44\x6d\x4f\xb0\x5a\xd5\x6c\x46\x1e\xc1\x33\xf8\xb7\x8a\xc2\x59\x99\xe3\x84\x48\xbb\x27\x25\x29\xf6\xc4\xa8\xc2\xcb\xc2\xf0\x91\x23\xc7\xab\x62\x49\x73\xdb\x27\x3e\xc9\xad\xf5\x15\x80\x13\x60\x8e\xc5\x06\xa4\x0b\xe3\x37\xe4\x41\xe4\xba\x66\x45\x52\x62\x85\xd0\x0e\x90\x69\x5b\xc8\x81\x91\xed\x5b\x3e\x0c\xfd\xe6\x5a\x9d\xe2\xc4\x56\x30\xa6\x0f\x43\xcf\xab\x9e\x85\x66\x1b\x22\x4c\x6c\xe8\x05\xb1\x5a\xac\x8d\x3d\xd7\xb4\xa1\xed\x84\x26\x82\x1e\xf2\xe4\x75\x04\x00\xd8\x5b\x0e\x94\x70\x96\x0d\x9d\x20\x30\x6d\x88\x02\xcf\xb2\xa1\x6f\x47\xa6\x0d\x3d\x3b\xb0\x6c\x18\x20\x94\xd8\xd0\xf1\x1d\xcb\x86\x76\x2c\x9f\xfb\x2e\x92\xd7\x0a\x63\xe8\xc8\x5f\xe4\x45\xcc\x83\xbe\x1b\x9a\x1e\xf4\xbd\x50\xc1\x4b\xc8\xf6\x6f\x10\x56\x84\xb8\x8e\xcc\x82\x2c\x09\xee\x4b\x70\x3f\x4c\x2c\x1b\xa2\x58\xe1\x89\x22\xcb\x86\x5e\x28\xaf\x1d\x4f\x8e\x1e\x3a\xbe\xc2\xef\x4a\x20\xc7\x93\x44\x20\x5b\x92\x58\x11\xe7\x7a\x4f\xd7\x81\x1d\xff\x33\x84\x5e\x28\xb3\x28\x4b\xcd\x5c\x52\x19\xc9\xa6\xd8\x93\x14\x23\xc7\xb7\xd4\xec\xab\xeb\xc4\xf2\xaa\xa1\xac\x08\x22\xe4\x9a\x2e\x0c\xdc\xb8\xbe\x96\xbf\x28\xb1\x4d\x09\x81\x64\x8b\x87\xcc\xa7\x96\xfa\xb7\x54\x50\x96\x6c\xad\x7b\x54\xbd\x25\x01\x92\xa3\x6e\xa0\xe6\x11\xfb\x92\x38\xc9\xdc\x20\x70\xd4\xe5\xc6\x85\x6e\x10\x27\x12\xc2\x57\x4c\x09\x02\x47\x41\x86\xa7\xeb\x20\xb8\x73\x02\x18\xbb\xa1\xe9\x38\xd0\x47\xbe\xe9\x20\x88\xa2\xb8\xd6\x0e\xf3\x4c\x57\xbe\x1a\x60\x45\x19\x5b\x18\xaf\x7f\x55\x87\x31\x1d\xaa\x7b\x83\x95\x74\x7a\x0d\xb2\x1f\x62\x2e\xdd\x80\xae\xfd\x96\x00\xdd\x13\xae\x55\xbd\xf7\xc2\x70\xaf\x10\xa8\xd5\x9e\xde\xcc\xe6\x04\xf5\xa0\xbc\x1a\xcf\x12\x46\x93\x2f\x0b\xa3\x14\xb8\x10\x9f\x38\x4e\xc7\x13\x03\x08\x2a\xa4\xeb\xf9\x2c\x9f\x01\x5e\x00\x99\x81\xd1\x6c\x47\x86\xfa\xd6\xb3\xda\xf9\xdf\xc5\xbb\xba\x0e\x44\xbe\xdb\x9c\x87\xf8\xd7\xf3\x1e\x3f\xc4\xc3\x2a\xfa\xef\x19\xd6\x66\x3b\x67\xe0\xca\xcf\xd6\x74\x4b\x73\xb1\x8a\x1d\x23\x33\xb2\x27\x19\x4f\xd3\xb7\x09\xa3\xf9\xf9\x13\x43\x39\x65\xc7\x76\x61\x18\x23\x33\x8e\x61\xe0\x44\x9f\xbc\x18\xba\x76\x68\x3a\xd0\x89\x3d\xe9\x3f\xfc\x20\xb4\x1c\x18\xa2\xd8\x42\x36\x74\xdc\xc8\x72\xa4\x1f\xb5\x90\x07\x7d\x07\x55\x37\xca\x1d\xa1\x10\x22\xd7\x91\xde\x3c\x84\xb6\x1f\x98\xc8\x85\x8e\x13\x9e\xee\x02\xe8\x87\xd1\x1e\xc5\x11\x8c\xbd\xc4\x36\x1d\x18\xb9\xae\x74\x5e\xa1\x5f\xb5\xc5\x66\x1b\x32\x4e\x3c\xe8\x44\xae\x69\x9b\x31\x8c\x7d\xe9\x1f\x3d\x1f\x99\xad\x31\xa5\x0b\x64\xc8\xf7\xa0\x17\xb9\x56\x1c\x42\xd7\x75\x13\xe4\xc0\x20\xb2\x42\xe8\x7b\xbe\x89\x6c\xe8\x45\xb1\x85\x02\xe8\x79\xf1\xf9\xdd\x67\x47\x9e\x43\x64\x22\x3b\x84\x28\x74\xcc\x73\x06\xdc\xec\x6a\x86\xf8\x05\x5d\xda\x74\xad\x22\x50\xf9\x54\xbd\x58\x78\x66\x8d\x3c\xbf\x30\xc6\x7b\xbc\x2b\xaf\x1b\xe0\xbf\xbb\x05\x06\x61\xdc\x9c\x07\x5a\x60\xab\xc7\x0f\xb4\xc0\x6b\xcc\x3d\xc1\xbf\xcc\x04\x23\x1b\xfa\x32\xd7\xf8\xe0\xfa\x30\x8c\xc3\xc4\x8a\x61\x14\xf9\x95\x2d\x45\x71\x64\x46\xd0\x46\x5e\x73\x53\x9d\xf6\x28\x0e\x60\x14\x55\x91\xd8\xac\xe0\x25\x98\x6b\x9e\x81\xd5\xa7\x8d\xe7\xc1\xd0\x0b\x92\x1a\x6f\xfd\xd4\x6a\x77\xa8\xd1\xff\xb3\x3a\xdd\xc5\x11\xf4\xbc\x6a\x60\x33\xb6\xa1\xe7\xc8\xdc\xa6\xa1\xf3\x2b\xf8\xad\x1a\xde\x31\x6d\x00\xc0\xc6\xaa\xd1\x2b\xba\x83\x86\xee\xb8\x4d\x77\x7c\x41\x77\x0f\xd1\xf1\x39\xd1\x72\x86\xc3\xe9\x76\x90\x07\xc3\x08\xd5\x94\x3b\x76\x00\x43\x95\x96\x9d\xe8\xfd\x21\xf6\xdd\x6f\xde\x3d\x06\x5e\x05\xdc\x66\xc9\xbf\x65\xe2\xea\xd9\x85\x8d\xdf\xe1\x2c\x21\x0c\xec\x72\x59\xcc\xfc\xbf\x0e\xb6\xc8\x81\x71\xe4\x34\xe7\x21\xa6\x7e\xde\xe3\xc7\x99\xfa\x1d\xe3\x3f\xd4\xd4\x91\x8b\x60\x64\x7b\x26\xb2\x03\xe8\xc5\x88\x85\x3e\x8c\xdd\xc0\xaa\x4e\x49\x00\xe3\xd8\x92\x3f\xa6\xba\x42\x11\x74\x65\xf5\x61\x39\x3e\x74\x91\xa3\xe2\xec\x09\xa4\x6a\x75\xaa\xeb\x0a\xc0\xb4\x59\x85\x29\x34\xab\xd3\x27\xd7\x86\xbe\xef\x99\xbe\x2c\x2c\xae\xf5\x55\xed\x51\x3d\x74\x75\xd9\x10\x60\x9e\x08\x60\x6d\xfc\xc1\x27\x85\xd8\x44\x91\x23\x3d\xc4\x75\x04\xc9\x69\x6e\x55\x8b\x53\x5d\x9f\xa8\xaf\x90\xd7\x73\x38\x1b\x4a\xd5\x3c\x4f\xe8\x3b\xbb\x77\xb2\xcf\x39\xb1\xef\xd3\x05\xef\xff\x05\x9e\xe0\xec\xd9\xd9\xda\xe7\xba\x32\x1f\x79\x51\x27\xf8\x15\xd4\x0d\xf8\x5e\x59\x16\x98\xd3\x2c\xdf\x55\xeb\x30\x2b\xca\x48\x69\xd4\xab\x55\xf2\xc6\x00\xd5\x0e\x8d\xd3\x22\x18\x78\xba\xda\xee\x98\xa0\x39\x23\xd3\x77\xc0\xb2\x9e\x6d\x1c\x4f\x0a\x9a\x77\xad\xb1\xa4\x3c\xd9\x6d\x49\x26\xe0\x9a\x88\xf7\xd5\x27\x07\x7f\x3f\x7e\x4c\xc7\xf5\x7a\xdb\x68\x02\x71\x9a\xbe\xdf\x93\x4c\x7c\xa2\xa5\x20\x19\x29\xc6\x86\xf2\x6f\x86\x09\x2a\x90\x5f\x77\x59\xd2\xb5\x83\x5e\x87\xb9\xbd\x92\xd3\x87\xbd\x02\xbb\xe3\x59\x46\x12\x41\xd2\x8f\xf7\xe5\xe4\xf9\x20\xd3\xa9\x7e\x06\xa7\x22\xa8\x6b\x12\x23\x35\xcc\xc8\x04\xaa\x2c\xea\xc0\xfc\xfc\x49\xb3\xd4\x3a\x8e\xec\x67\xf0\xcf\xa1\x1f\x69\x96\xf2\x47\x48\x0e\x82\x14\x19\x66\x90\x66\x7b\xfe\x85\x8c\x47\xdb\xe3\xc7\xfb\xd1\xa4\x2b\xa2\xd4\x3d\xd4\x5b\xdc\x5f\xb0\xc0\x60\x01\xbe\x49\x0f\x35\x03\x46\x3a\x9b\x22\x27\x9e\x86\x51\x64\x7c\xef\x60\xf5\x1e\x17\x80\xe1\x52\x3c\xac\x68\x06\x16\xa0\x6b\xc7\xe5\xf3\x27\xab\x5d\xa6\x16\x39\x3b\x18\x3d\x9e\x68\x5f\x65\x74\x4f\x6a\x4d\x44\xbb\xff\x68\xd2\x3d\x64\xe7\xae\xbb\x16\x1d\x69\x81\x1f\xe5\xf0\x34\x2f\x75\x14\x30\x22\x40\xb5\x60\xc8\x0b\xb0\xd0\x0b\xff\xb4\x84\x39\xea\x90\xad\x3c\x1a\x24\x90\x66\x19\x29\xd4\x8e\xf9\x05\x30\x0c\xfd\xa8\x19\x79\x7c\xcf\x34\x6f\x70\x68\x5e\xc2\x15\x2f\xde\xe3\x64\x33\x6e\xe6\x33\xae\xbf\xe0\xd1\xcd\x44\x1e\x0a\x67\x7b\x1a\x49\x41\xb0\x20\xf5\x4c\xc6\xa3\x6a\xe5\x54\x37\x85\x13\x06\xa8\x96\x60\xc1\xa2\xf9\x68\xe8\x1a\xb8\x9a\xf2\xef\xe4\x20\x9e\xba\xc0\x32\x67\x54\x8c\x47\xb3\xd1\xe4\xbf\xed\xff\xd1\x23\x38\xb1\x0d\xe7\x39\xc9\xd2\xbb\x0d\x65\xe9\x58\x61\xd5\x10\xf9\xbd\xcb\x37\xf4\x2b\x42\x6b\xa5\x42\xfb\x6a\x3c\x2b\x39\x23\x90\xf1\xf5\xd8\xf8\x40\x18\xe3\x86\x66\x78\x69\x1a\x34\xef\xd1\x94\xd6\x62\xf7\xa4\xe2\xa3\x4e\xc6\xab\xf1\xa5\x85\x42\x69\x9e\x8b\x85\x91\xf1\x8c\x18\x7d\x72\xd6\x0e\x5e\xad\x07\x4d\x9e\x94\x70\x61\x54\x6f\x15\x9e\x1c\xfb\xab\x57\xaf\x34\x5a\xf9\x9d\xb0\x92\x48\xba\x5e\xd1\xfc\x4f\x1e\xfd\xe3\xfd\x95\x61\xff\xa4\xe1\x34\x43\xf4\xa2\x79\x5a\xdc\x9a\x40\x95\xbc\xc1\xfa\xdd\x38\x58\x80\x91\x14\xc5\xe8\x05\x48\x4f\x25\x7a\x07\xce\xf6\xfe\xa7\x97\xe0\x7e\x2a\x0e\x5e\x8e\x5c\xe7\x79\x4f\xb6\x32\xfb\x66\x48\x6d\x34\x66\xc0\x18\xbd\xe9\x54\xd4\x37\x23\xc3\x04\x06\xcd\x2b\x10\x9a\x83\x37\x23\xe3\xbb\xce\xb7\x74\xbc\x74\x1e\xb4\x41\xae\x65\xc4\xcd\x02\x87\x6e\x17\xd4\x4b\x44\xd1\x23\xde\x97\xe9\xcb\x05\xfb\x6f\x75\x55\xad\x1a\xef\x5f\x3e\xcd\x3e\x2d\xfb\xd1\x7c\xbb\x8d\x6b\x25\x23\x24\x07\x63\x41\xb7\x44\xe6\x79\x25\x67\x7b\x32\xd1\xed\x5f\x3e\x05\x54\x30\xbe\x06\x0a\x54\x80\x12\xbf\xd3\x2d\xe1\x3b\xd1\xea\x38\x01\xdf\x34\x69\x78\x73\xd4\xa8\xc7\xba\x6f\x41\xd5\xa4\x4c\x49\xb1\x36\xce\x9d\xc8\xeb\x60\x87\x34\x95\x1e\x86\x9c\x52\xcb\x3d\x66\x3a\x45\x92\x91\xac\xca\xef\x5c\x18\xfc\x0c\xf6\x98\x69\xe3\xd4\x8a\x66\xef\x50\x64\xbf\x28\x26\xb4\xf7\x3b\x34\x72\x7f\xfa\xf2\x75\x01\x8c\xfa\x7b\x56\x14\xa9\x2f\x5a\x5f\xe2\xc0\xcf\xb6\x3e\xf4\x8d\x61\xbc\x59\xd1\xec\x8d\xf1\xd2\x71\x9a\x7d\x20\xcd\x10\xb2\xa0\x5f\x18\xea\x3b\x60\xbc\x13\xdc\x3c\xff\x99\x18\x3d\x2a\xa2\x6f\x99\x4e\xc1\x72\xb7\x06\x8f\x54\x6c\x5a\x1b\x30\xcb\xde\x0e\x74\x35\x6e\xd2\xf5\xf9\xe2\x8a\xa0\xa6\x53\x75\x52\x26\x33\x76\x6d\xdb\x3c\x69\x8d\xd6\xe5\xb4\xba\x75\x66\x5f\x2d\x18\xcd\x47\xe9\xf2\x68\x15\x14\x2b\xda\xb5\x15\xae\x39\xfe\xe4\x2c\xa1\x47\x6a\x76\x7e\x30\xab\xcf\xb6\xab\x5f\xf5\x49\xfe\x1f\xd0\xc0\xab\x4a\xfe\x07\x15\x70\xb0\xa2\x5f\x33\xa5\x41\xb2\xd0\xc8\x52\x5b\x22\x5d\x6e\x1d\x1a\x4d\xce\x6a\xa1\x3d\x66\x6f\x8c\x9f\x3a\x88\xba\xe2\xdb\x89\xf8\xed\xf8\xf1\x7e\xac\x4f\x49\xb5\xec\x52\x9b\xce\xce\x89\xa0\xf9\x0b\xc6\xff\xc4\xd7\x63\xc6\xd7\x37\x8f\xcf\xf8\xfa\x62\x78\xc6\xd7\x7f\x34\x0f\x7a\x5a\x24\xb9\xb9\xaa\xe6\xb2\xc2\xa2\xc5\x48\x67\xc3\xba\x8a\x04\x32\x92\xad\x65\x61\xd2\xeb\x58\x3a\xbb\x4a\x9d\x54\xd5\xcc\x4d\x2a\x26\x43\x53\xdd\xbb\x1b\xed\x8b\xe8\x7f\xb7\x40\xf6\xe4\x5b\x8d\x77\x04\x21\x1c\xbd\x51\xad\xe5\x6e\x59\x8a\x62\xdc\x82\x04\x16\x08\x27\xb7\xaa\xff\xf3\x0d\x65\xe7\xb2\x97\xf8\x6f\x2e\x5d\x55\xce\xd4\x2b\x6c\x0d\xc6\x8b\xf5\xba\xe9\xd9\x82\xdd\x7c\x5a\x6f\xea\x9c\x4f\xd5\xbf\x73\xf9\xbf\x00\x00\x00\xff\xff\x21\x88\xba\x11\xe6\x45\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 17894, mode: os.FileMode(438), modTime: time.Unix(1527787728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

