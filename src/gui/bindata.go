// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5c\x7b\x8f\xdb\x38\x92\xff\x7f\x81\xfd\x0e\x8c\x82\x81\xdd\x19\x89\x16\xf5\x96\xd3\x0e\xb0\xdb\x93\x41\x82\xcb\xdc\x36\x90\xc1\x02\xf7\x57\x83\x96\x68\x9b\x68\x5a\xd4\x49\xf4\x2b\x83\x7c\xf7\x03\x29\xc9\x2d\xdb\xa2\x2c\xf7\x6c\xb0\x7b\x0a\xd0\x92\xc5\x62\xb1\x58\x8f\x5f\x15\x29\x29\xf7\x6f\x52\x9e\x88\x43\x4e\xc0\x4a\xac\xd9\x87\xbf\xfe\xe5\xbe\x3e\x03\x00\xc0\xfd\x8a\xe0\xb4\xbe\x6e\x8e\xfb\x52\x1c\x18\x39\xbb\x29\x0f\xb8\x2b\x70\x9e\x93\x02\xfc\x71\xd9\x26\x8f\x1d\x4d\xc5\x6a\x0a\x50\x68\xe7\xfb\xf7\x60\xf2\x0e\x7c\x25\x02\x88\x15\x01\x25\xfd\x46\x00\x5f\xa8\xeb\xbc\xe0\xcb\x82\x94\x25\x98\xe3\x02\xbc\x9b\x74\x73\x5a\x11\xba\x5c\x89\x86\x55\x37\xcd\x37\x8b\x66\x29\xd9\x4f\x01\x72\x6c\x3d\x55\xce\x4b\x2a\x28\xcf\xa6\x00\xcf\x4b\xce\x36\x82\x28\xc9\x3e\x66\x78\xce\x08\x48\x18\xcd\x73\x9a\x2d\xb5\x82\x48\x82\x29\x28\x48\x22\xc6\x76\xbe\x37\x01\xf2\xdb\xa7\xd0\xcf\xf7\x77\x8a\xdf\x27\x9a\x12\xb0\xc2\x6c\x71\xd3\x34\xbf\x77\xdf\x3e\xd3\x5c\xd9\xf0\x24\x8c\xac\x49\x26\x4a\x20\x56\x58\x80\x35\x7e\x26\x60\x93\x0f\x1b\x0d\x26\xb4\x48\x18\xd1\x59\x6e\x98\x2e\x1b\xfb\xba\x7a\x92\xa3\xe1\x7a\x68\xe6\xbc\x48\x49\x31\x05\xc8\xce\xf7\xa0\xe4\x8c\xa6\xe0\x6d\x14\x3d\xd8\x7e\xd8\xdb\xc1\x2a\x70\x4a\x37\xe5\x14\xc4\xee\x2d\xd6\x1e\x66\x57\x69\xc9\xa3\x59\x6d\x69\x55\xad\x69\x44\x81\xb3\x66\x14\x75\xbd\xe0\xc5\x1a\x00\x1b\xba\xe5\x7b\xad\xa5\x9b\x7e\x92\x76\x0a\x0a\x2e\xb0\x20\x63\x3b\x25\xcb\x3b\x7d\x9f\x33\xef\xb8\x9f\x74\xc5\xa5\x36\x58\xe7\x3c\x3d\x68\xac\x3d\xc7\xc9\xf3\xb2\xe0\x9b\x2c\x9d\x82\xb7\xce\xaf\x6e\xe8\xfd\xad\xdf\xe2\x6e\x8f\x53\x2c\x78\x26\xac\x05\x5e\x53\x76\x98\x82\xbf\x15\x14\x33\x13\x7c\x22\x6c\x4b\x04\x4d\xb0\x09\x4a\x9c\x95\x56\x49\x0a\xba\xe8\xeb\x2f\xdd\x5c\x3a\x9f\x76\x14\x41\xf6\xc2\xc2\x8c\x2e\xb3\x29\x48\x48\x26\x48\xa1\xf3\x00\x9c\xa6\x34\x5b\x5a\x82\xe7\x95\x87\xe9\x1c\x80\x33\x5e\x4c\xdf\x12\x5b\xfe\xd3\xd1\x6c\x8a\x92\x17\xd3\x94\x2c\xf0\x86\x09\x0d\x91\xb5\x23\xf3\x67\x2a\x2c\xc1\x37\xc9\xca\x4a\x30\x63\x7c\x23\xa6\x20\xe3\x59\x85\x34\xf4\x1f\x5f\xc1\x57\xbc\xc0\x05\xd5\x1a\xba\x61\xb1\x29\x49\x61\x95\x84\x91\xa4\xcd\xe0\x5a\xe7\x67\x09\xe7\x9a\xbe\xff\xc5\xb3\xff\xdd\x90\x82\x17\xe0\xd3\xef\xbf\x7d\xd1\xf3\x58\xf3\x6f\x1a\x0e\xbf\xd2\x82\x2c\xf8\x5e\xdb\xb5\xea\x5e\x6a\x7a\x7f\x96\x96\xca\x88\x00\x1f\xf7\x39\xe3\x05\x29\x26\x1f\xd3\x25\xe9\x65\x26\x8f\x6e\x66\xff\xcd\x33\x2b\x2f\xc8\x82\xee\x49\x0a\xb6\xa4\x28\x29\xcf\x4c\x69\xa4\x82\x64\x82\x1d\xfa\x59\x76\x1d\xe5\x26\xcf\x79\x21\x48\x0a\xe6\x07\xf0\xb0\x2a\xf8\x9a\x00\x9c\xa5\xe0\x1f\x39\x29\x70\xa7\x90\x1d\x80\x3d\x79\x07\x7e\xe7\x79\x27\xf5\xdb\xf5\xe1\xf3\xa3\x26\x06\x1b\x3f\x9d\x73\x21\xf8\x7a\x0a\x1c\xad\xab\x0e\x92\x02\xf6\x0c\xc5\x73\x9c\x50\x71\x98\x02\x1b\xfa\x1d\x43\x5c\x72\xeb\x9c\xe4\x63\x93\x62\xba\xf3\x4b\x93\x81\x9e\x12\x9e\x09\x4c\x33\x52\x5c\x29\x12\x7c\x7d\x6c\xae\x71\xb1\xa4\x12\xc3\x37\x82\x5f\xcb\x33\x3d\x6c\x24\xe6\xf2\x7c\x6a\x55\xb9\xa8\x0f\x9a\x5f\xd2\x46\x41\x18\x16\x74\x4b\x7a\xc9\x4f\xb2\xa5\x9e\xb2\x9a\x46\x8d\x44\x51\x9f\x98\x6d\x40\x2e\x48\xda\xcd\xf2\xfb\x5f\xff\x72\x79\xb3\xc3\xe9\x8e\x96\xc8\x39\x95\xe1\xa7\xb1\xc3\x82\x71\x2c\xa6\xa0\x90\x7a\xbc\x0e\xcd\x8e\x7f\x0d\x49\x17\xea\xe8\xe3\xb4\xab\x6d\x16\xda\x3a\xc0\xed\xb0\x83\x26\x1d\xf0\x7c\x1a\x5c\x2b\x54\x90\x3e\xa6\x86\xe7\x13\xa5\x9f\x29\xea\x9e\xfe\x40\x23\x41\xc6\x71\x4a\x8a\xa7\x72\x85\x53\xbe\xbb\x12\x17\x3d\x85\xd3\x80\xb8\x18\x5c\x00\x0d\x29\xd4\x5a\x7e\xae\xa1\x60\x64\x21\xa6\x91\xbe\x1e\x93\x76\xea\x8f\xd0\xb6\xeb\xcf\xd9\xa6\x27\xf0\xce\xaa\x40\xdf\xfe\x69\x78\x7d\x59\x2c\xe7\x78\x6c\x9b\xea\x1f\x44\xb2\xb8\x1b\x68\xba\x0e\x13\x83\xb7\xc9\x8a\xf3\x92\xf4\xc6\x95\x72\x9b\x41\xc8\xdd\xe1\x2e\xb2\x48\xbc\x92\x36\xfa\xca\x9b\x61\x83\x64\x7c\xf7\xb4\xa0\xac\x7b\x1a\x75\x4c\x27\x9e\xfc\xd7\xa9\xe6\x1a\x3e\xa4\x03\xbc\x1f\x96\xa2\x3a\xb3\xca\x2f\xb4\x20\x09\x2f\x0e\x9a\xac\x92\xca\x66\xc1\x8b\xc3\xd3\x50\x9d\xf4\xb8\xf3\xab\x83\xaa\x0e\xcd\x66\x69\x34\x2c\x21\x57\x4e\x92\x3d\x1d\xa7\xd0\x8f\xc3\x4a\x91\xaf\xb5\x25\xce\xe8\x1a\x0b\x72\xd9\xa2\x19\xb3\xbd\x84\xc1\x8c\x01\x1b\xa2\xf2\x5a\x79\x3b\xac\x4b\x97\x26\x70\x22\xbb\x3d\xcd\x37\x42\xf0\x4c\x23\x51\x5d\x6a\x83\x3a\x67\xf5\x1a\x62\x8d\xf7\x96\xac\x32\x48\xa6\x4b\x5c\x29\x2d\x73\x86\x0f\x53\x40\x33\x46\x33\x1d\x04\x5e\x56\x99\x3d\xb9\x22\x95\x6e\x8a\xab\xf9\x6b\x68\xaf\xce\x7d\xba\xe2\x5b\x6d\x3e\xae\x42\x4e\xa5\xff\x61\xac\x65\x44\x3c\x55\xe2\xf7\xb2\xac\x33\x73\xdc\xc5\x17\x9c\x95\x29\x3d\x19\xb3\x26\x53\x88\x0f\xac\xee\x7c\xd8\x21\xe6\xdb\x4a\xc2\x27\x9a\x5f\xc9\x7b\xb6\xbe\xc2\x38\x43\x7e\x07\xf6\x90\xb6\x97\xb6\x3d\xf0\x75\x36\x9f\x3f\x83\xa4\x6f\xe7\x64\x49\x75\x7e\x3d\x79\xd7\x2e\xbf\xdd\x61\xc5\x62\x8f\x15\x86\xe9\x5c\x49\xf4\x54\x6e\x97\x66\x97\x41\x04\xcf\x75\x6d\xf3\x82\xe0\x67\xd9\xa8\x99\xce\x59\x60\x59\x73\xc6\x93\xe7\x7e\xd4\xec\x49\xff\x4d\x0d\x72\x7d\x29\xa0\x01\xe7\xae\xb0\xa0\x6b\xbc\x24\xfd\x60\x73\xb3\x64\x03\x3d\xfd\x5f\xa1\xd8\x1b\xb1\x65\x7b\x65\xaa\x5d\xb0\x0d\x08\x2e\x89\x45\x33\x8b\x6f\x74\x00\x3a\x0c\x8e\x5b\x9e\x1d\x5f\x51\x64\x4f\x5a\x3e\xee\x31\x0d\x0d\xc1\xd3\x89\xf7\x82\xea\x51\x42\xf4\x1a\xce\xd5\x2f\xdd\x26\x1a\xdf\x5b\x55\x41\xdf\x9b\x3c\x5a\x3a\x0a\x87\xb9\x11\x66\xa4\xe8\x47\xf4\xee\x1c\x01\x6e\x59\xd6\xbc\xac\x9f\xaf\x01\xfe\x8d\x95\x26\x64\x5c\xe7\xe3\x32\x6f\x37\xe3\x7a\xc3\x96\x66\x9a\xaa\x08\x1c\xdd\xa6\x6f\xbb\xba\x1f\x3b\xc0\xa9\x71\x5c\x1d\xc9\x96\x14\x0b\x26\x8d\xbc\xa2\x69\x4a\xb2\x81\x59\xaf\x20\x72\xcd\xf7\x44\xf3\xb2\x17\x83\x7a\x90\xbe\xd1\x54\x0f\xc9\xb0\x32\xe7\xa6\x45\xb5\xa7\x1d\x4c\x25\xca\x9e\x5d\x80\x5b\x11\x23\xb8\x59\x93\xc3\x22\xdd\x86\xd1\xed\x9c\x7b\x23\xfd\x05\x44\x06\x86\x40\x05\x1f\x4f\x34\xb9\x92\x81\x5e\x6f\xfd\x8e\x51\x4f\x1f\x0f\xdc\x4f\x5a\x0f\xf6\xee\xe7\x3c\x3d\x9c\x3e\x22\x38\xed\x7f\x9f\xd2\x2d\x48\x18\x2e\xcb\x99\xb1\x3e\x7c\x7e\x34\x3e\xfc\x0f\xdf\x14\xe0\xf3\xe3\x14\xdc\x97\x39\xce\x00\x4d\x9b\x06\xe4\x84\xd0\x86\x36\x44\xf7\x13\xd9\xf2\xe1\x7e\x92\xd2\xed\xf9\x33\x89\x16\xbb\x93\xad\x0f\xe3\x2a\xf9\xe5\x36\xa2\xd1\xf1\x6c\xa3\xdd\xa3\x7e\x26\x69\x80\x14\x0b\x6c\xc9\x95\xd0\xcc\x98\xe3\x92\x80\x63\x83\x14\xbe\xf9\xd1\xc1\xec\x9c\x61\xf5\xa4\xec\x92\x9f\x0c\x80\x8a\x59\x45\xf1\xa4\x6e\x74\xce\xe8\x16\xb6\x6a\xa7\xe0\x84\x6f\x75\x47\xcb\x58\x7b\x5f\x0e\x26\xd9\x9c\x6f\x00\xea\x26\x6d\xff\x34\x8c\x79\xc7\x3d\xbd\x01\x4f\x57\xec\xd7\x8c\x77\xb1\x48\xd6\xc9\xfa\x4b\x43\xd0\xf2\xc8\xd1\x45\xef\xd1\x07\x99\x89\x6b\xcf\xbc\x51\x73\xe2\x90\x93\x99\x51\x85\x6e\x6d\x0e\xc5\xde\x68\x64\x3d\x59\xca\xe9\xe4\x7c\x50\x7d\xde\xdc\xae\x58\xad\x46\x47\x52\x8f\xa3\x2b\x7a\x6c\xad\x05\xb5\x2e\xae\x94\xf2\x95\x64\x29\x10\x7c\x0a\x6a\x25\xd5\x8d\xba\x2e\x8a\xa3\x52\xc6\x71\x19\xa7\xe3\xaf\x3a\xf0\x5c\xea\x08\x6c\x31\xdb\x90\x99\x71\xc4\x8a\x13\xd8\xa8\x68\x3e\xf4\x0c\x3b\xa9\x06\xeb\x0b\x2a\x29\xd2\x0b\x7e\xf7\xca\x54\x6e\x97\x8d\x9a\x5a\xc0\x6c\x80\xfd\x9a\x65\xe5\xcc\x58\x09\x91\x4f\x27\x93\xdd\x6e\x07\x77\x2e\xe4\xc5\x72\xe2\xd8\xb6\x3d\x29\xb7\xcb\x9a\x64\xba\x67\x34\x7b\xee\x22\x44\x71\x1c\x4f\x54\xab\xd1\x3c\x8f\x9a\x19\x08\xa2\xca\x7d\x1e\x70\x8e\x9f\x90\x01\xf6\x33\xc3\xce\xf7\x06\x38\xd4\xe7\x2d\x25\xbb\xbf\x73\x79\x17\xd8\xc0\x89\xa0\x13\xf8\xf5\xc9\x00\x0a\xc2\x67\x06\x51\x6f\x27\x58\xad\xc5\x6c\x46\x76\xe0\x82\xfe\xbd\x92\x70\x5a\xe6\x38\x21\x32\xec\x49\x49\x8a\x2d\x31\xaa\xec\x32\x33\x7c\xe4\xc8\xf1\xaa\x54\xd2\xfc\xec\xd1\x94\xd2\xd6\xf2\x0a\xc1\x91\x30\xc7\x62\x05\xd2\x99\xf1\x1b\xf2\x20\x72\x5d\xb3\x12\x29\xb1\x42\x68\x07\xc8\xb4\x2d\xe4\xc0\xc8\xf6\x2d\x1f\x86\x7e\x73\xad\x4e\x71\x62\x2b\x1a\xd3\x87\xa1\xe7\x55\xf7\x42\xb3\x4d\x11\x26\x36\xf4\x82\x58\xed\xd5\xc6\x9e\x6b\xda\xd0\x76\x42\x13\x41\x0f\x79\xf2\x3a\x02\x00\x6c\x2d\x07\x4a\x3a\xcb\x86\x4e\x10\x98\x36\x44\x81\x67\xd9\xd0\xb7\x23\xd3\x86\x9e\x1d\x58\x36\x0c\x10\x4a\x6c\xe8\xf8\x8e\x65\x43\x3b\x96\xf7\x7d\x17\xc9\x6b\xc5\x31\x74\xe4\x5f\xe4\x45\xcc\x83\xbe\x1b\x9a\x1e\xf4\xbd\x50\xd1\x4b\xca\xf6\xdf\x20\xac\x04\x71\x1d\x59\x04\x59\x92\xdc\x97\xe4\x7e\x98\x58\x36\x44\xb1\xe2\x13\x45\x96\x0d\xbd\x50\x5e\x3b\x9e\x1c\x3d\x74\x7c\xc5\xdf\x95\x44\x8e\x27\x85\x40\xb6\x14\xb1\x12\xce\xf5\x5e\xae\x03\x3b\xfe\x67\x08\xbd\x50\x16\x51\x96\x9a\xb9\x94\x32\x92\x4d\xb1\x27\x25\x46\x8e\x6f\xa9\xd9\x57\xd7\x89\xe5\x55\x43\x59\x11\x44\xc8\x35\x5d\x18\xb8\x71\x7d\x2d\xff\xa2\xc4\x36\x25\x05\x92\x2d\x1e\x32\x5f\x5a\xea\xbf\xa5\xa2\xb2\x64\x6b\xdd\xa3\xea\x2d\x05\x90\x1a\x75\x03\x35\x8f\xd8\x97\xc2\x49\xe5\x06\x81\xa3\x2e\x57\x2e\x74\x83\x38\x91\x14\xbe\x52\x4a\x10\x38\x8a\x32\x3c\x5e\x07\xc1\x83\x13\xc0\xd8\x0d\x4d\xc7\x81\x3e\xf2\x4d\x07\x41\x14\xc5\xb5\x77\x98\x27\xbe\xf2\xcd\x00\x0b\xca\xd8\xcc\x78\xfb\xab\x3a\x8c\xc9\x50\xdf\x1b\xec\xa4\x93\x6b\x94\xfd\x14\xf7\x12\x06\x74\xed\xb7\xe4\xe7\x9e\x6c\xad\x96\x7b\xaf\xcc\xf6\x8a\x81\xda\xec\xe9\x2d\x6c\x8e\x54\x4f\x0a\xd5\x78\x96\x30\x9a\x3c\xcf\x8c\x52\xe0\x42\x7c\xe1\x38\x1d\xdf\x19\x40\x50\x21\xa1\xe7\xab\xbc\x07\x78\x01\x64\x01\x46\xb3\x0d\x19\x8a\xad\x27\x4b\xe7\xff\x14\x74\x75\x1d\x88\x7c\xb7\x39\x0f\xc1\xd7\xd3\x1e\x3f\x04\x61\x95\xfc\x8f\x0c\x6b\x8b\x9d\x13\x72\x85\xb3\xb5\xdc\x32\x5c\xac\x62\xc3\xc8\x94\x6c\x49\xc6\xd3\xf4\x7d\xc2\x68\x7e\x7a\xc7\x50\xa0\xec\xd8\x2e\x0c\x63\x64\xc6\x31\x0c\x9c\xe8\x8b\x17\x43\xd7\x0e\x4d\x07\x3a\xb1\x27\xf1\xc3\x0f\x42\xcb\x81\x21\x8a\x2d\x64\x43\xc7\x8d\x2c\x47\xe2\xa8\x85\x3c\xe8\x3b\xa8\xfa\xa1\xe0\x08\x85\x10\xb9\x8e\x44\xf3\x10\xda\x7e\x60\x22\x17\x3a\x4e\x78\xfc\x15\x40\x3f\x8c\xb6\x28\x8e\x60\xec\x25\xb6\xe9\xc0\xc8\x75\x25\x78\x85\x7e\xd5\x16\x9b\x6d\xca\x38\xf1\xa0\x13\xb9\xa6\x6d\xc6\x30\xf6\x25\x3e\x7a\x3e\x32\x5b\x63\x4a\x08\x64\xc8\xf7\xa0\x17\xb9\x56\x1c\x42\xd7\x75\x13\xe4\xc0\x20\xb2\x42\xe8\x7b\xbe\x89\x6c\xe8\x45\xb1\x85\x02\xe8\x79\xf1\xe9\xaf\xaf\x8e\x3c\x87\xc8\x44\x76\x08\x51\xe8\x98\xa7\x0a\xb8\x19\x6a\x86\xe0\x82\xb6\x7c\xb9\xb2\x20\x50\xe5\x54\xbd\x57\x78\x12\x8d\x3c\x3f\x0b\xc6\x47\xbc\x29\xaf\x07\xe0\x7f\x7a\x04\x06\x61\xdc\x9c\x07\x46\x60\xab\xc7\x0f\x8c\xc0\x6b\xca\x3d\xd2\xbf\x2e\x04\x23\x1b\xfa\xb2\xd6\xf8\xe4\xfa\x30\x8c\xc3\xc4\x8a\x61\x14\xf9\x55\x2c\x45\x71\x64\x46\xd0\x46\x5e\xf3\xa3\x3a\x6d\x51\x1c\xc0\x28\xaa\x32\xb1\x59\xd1\x4b\x32\xd7\x3c\x21\xab\x4f\x2b\xcf\x83\xa1\x17\x24\x35\xdf\xfa\xae\xd5\xee\x50\xb3\xff\x67\x75\x7a\x88\x23\xe8\x79\xd5\xc0\x66\x6c\x43\xcf\x91\xb5\x4d\x23\xe7\x37\xf0\x5b\x35\xbc\x63\xda\x00\x80\x95\x55\xb3\x57\x72\x07\x8d\xdc\x71\x5b\xee\xf8\x4c\xee\x1e\xa1\xe3\x53\xa1\xe5\x0c\x87\xcb\xed\x20\x0f\x86\x11\xaa\x25\x77\xec\x00\x86\xaa\x2c\x3b\xca\xfb\x43\xe2\xbb\x3f\xbc\x7b\x02\xbc\x4a\xb8\xcd\x8e\x7f\x2b\xc4\xd5\xbd\xb3\x18\x7f\xc0\x59\x42\x18\xd8\xe4\x72\x31\xf3\xff\x3a\xd9\x22\x07\xc6\x91\xd3\x9c\x87\x84\xfa\x69\x8f\x1f\x17\xea\x0f\x8c\xff\xd0\x50\x47\x2e\x82\x91\xed\x99\xc8\x0e\xa0\x17\x23\x16\xfa\x30\x76\x03\xab\x3a\x25\x01\x8c\x63\x4b\xfe\x31\xd5\x15\x8a\xa0\x2b\x57\x1f\x96\xe3\x43\x17\x39\x2a\xcf\x1e\x49\xaa\x56\xa7\xba\xae\x08\x4c\x9b\x55\x9c\x42\xb3\x3a\x7d\x71\x6d\xe8\xfb\x9e\xe9\xcb\x85\xc5\xb5\xbe\xaa\x3d\xaa\x87\xae\x2e\x1b\x01\xcc\xa3\x00\xac\xcd\x3f\xf8\xa2\x18\x9b\x28\x72\x24\x42\x5c\x67\x90\x1c\xe7\x56\xb5\x38\xd5\xf5\x51\xfa\x8a\x79\x3d\x87\x93\xa1\xd4\x9a\xe7\x85\x7d\x67\xf7\x4e\xf5\x39\x47\xf5\x7d\x39\xd3\xfd\xbf\x01\x09\x4e\xee\x9d\x6c\x7d\x2e\xab\xf0\x91\x17\x75\x81\x5f\x51\xdd\xc0\xef\x8d\x65\x81\x7b\x9a\xe5\x9b\x6a\x1b\x66\x41\x19\x29\x8d\x7a\xb3\x4a\xfe\x30\x40\xf5\x82\xc6\x71\x0f\x0c\xbc\x5c\xad\x37\x4c\xd0\x9c\x91\xc9\x07\x60\x59\x17\xef\x8d\x27\x05\xcd\xbb\xf6\x58\x52\x9e\x6c\xd6\x24\x13\x70\x49\xc4\xc7\xea\x8b\x83\xbf\x1f\x3e\xa7\xe3\x7a\xbb\x6d\x74\x07\x71\x9a\x7e\xdc\x92\x4c\x7c\xa1\xa5\x20\x19\x29\xc6\x86\xc2\x37\xc3\x04\x15\xc9\xaf\x9b\x2c\xe9\x7a\x81\x5e\xc7\xb9\xbd\x93\xd3\xc7\xbd\x22\x7b\xe0\x59\x46\x12\x41\xd2\xcf\x8f\xe5\xdd\xe5\x20\x93\x89\x7e\x06\xc7\x45\x50\xd7\x24\x46\x6a\x98\x91\x09\xd4\xb2\xa8\x83\xf3\xe5\x9d\x66\xa7\x75\x1c\xd9\x17\xf4\x97\xd4\x3b\x9a\xa5\x7c\x07\xc9\x5e\x90\x22\xc3\x0c\xd2\x6c\xcb\x9f\xc9\x78\xb4\x3e\x7c\x7e\x1c\xdd\x75\x65\x94\xba\x87\x7a\x88\xfb\x0b\x16\x18\xcc\xc0\x1f\x12\xa1\xa6\xc0\xc8\x78\x46\x8c\xef\x1d\x4a\xde\xe2\x02\x30\x5c\x8a\xa7\x05\xcd\xc0\x0c\x74\xbd\x6a\x79\x79\x67\xb1\xc9\xd4\xee\x66\x87\x8a\xc7\x77\xda\x67\x18\xdd\xd3\x59\x12\xd1\xee\x3f\xba\xeb\x1e\xb2\xf3\x75\xbb\x96\x1c\x69\x81\x77\x72\x78\x9a\x97\x3a\x09\x18\x11\xa0\xda\x2a\xe4\x05\x98\xe9\xcd\x7e\xdc\xbb\x1c\x75\x58\x55\x1e\x0d\x13\x48\xb3\x8c\x14\xea\x55\xf9\x19\x30\x0c\xfd\xa8\x19\xd9\x7d\x64\x9a\x47\x37\x34\x2f\xe1\x82\x17\x1f\x71\xb2\x1a\x37\xf3\x19\xd7\x9f\xee\xe8\x66\x22\x0f\xc5\xb3\x3d\x8d\xa4\x20\x58\x90\x7a\x26\xe3\x51\xb5\x6f\xaa\x9b\xc2\x91\x03\x54\x9b\xaf\x60\xd6\x7c\x2d\x74\x8d\x5c\x4d\xf9\x77\xb2\x17\x43\xba\x1c\x15\x85\xf3\x9c\x64\xe9\xc3\x8a\xb2\x74\xac\xf8\x68\xc4\xfa\xde\x85\x03\xfd\xa6\x6f\xed\x4a\x68\x9f\x82\x67\x25\x67\x04\x32\xbe\x1c\x1b\x9f\x08\x63\xdc\xd0\x0c\x4f\x17\xe3\xf3\x18\x82\x32\x80\x66\xb3\x2a\x80\xfa\xec\xa1\x45\xab\x6a\xc7\xe6\xee\xc5\x59\x66\x46\xb5\xed\xff\x02\xbd\x6f\xde\xbc\xd1\x78\xcf\x77\xc2\xb4\xaf\x8e\xde\x3a\xaa\x66\x88\x5e\x36\x2f\xfb\x40\x77\x50\xd5\x39\xb0\x7e\x8a\x0c\x66\x60\x24\x75\x32\x7a\x05\xd3\xe3\x6a\xb6\x83\x67\xfb\x4d\xa1\xd7\xf0\x7e\xa9\xa3\x5f\xc7\xbc\xe3\x51\xe9\xa0\xd7\xba\x5a\xfe\xd8\xac\xcb\x75\xef\xee\xbc\x46\x2d\x3d\xaa\x7e\x9d\xed\xce\x54\x71\x6b\xd4\xb5\x96\x26\xff\xf6\x69\xf6\x59\xfc\x47\xeb\xed\x36\xad\x95\x8c\x90\x1c\x8c\x05\x5d\x13\x59\x9e\x94\x9c\x6d\xc9\x9d\xee\xad\xdb\x63\x36\x00\xe3\x6b\xa4\x40\x61\xad\xf8\x9d\xae\x09\xdf\x88\x56\xc7\x3b\xf0\x87\xa6\x7a\x6c\x8e\x9a\xf5\x58\xf7\x05\xa3\x9a\x94\x29\x25\xd6\x42\xf6\x51\xbc\x0e\x75\xc8\x50\xe9\x51\xc8\xb1\x22\xda\x62\xa6\x73\x24\x59\xa1\x54\xc5\x89\x0b\x83\x77\x60\x8b\x99\x16\xbc\x17\x34\xfb\x80\x22\xfb\x55\x30\xdd\x7e\x4a\xdf\xd8\xfd\xe5\x7b\xcd\x19\x30\xea\xaf\x30\x51\xa4\xbe\xc3\x7c\x0d\x98\x9e\x3c\xb0\xef\x1b\xc3\xf8\x79\x41\xb3\x9f\x8d\xd7\x8e\xd3\xbc\xbd\xd0\x0c\x21\xd7\xa1\x33\x43\x7d\xbd\x8a\x37\x82\x9b\xa7\x7f\xee\x8c\x1e\x17\xd1\xb7\x4c\x26\x60\xbe\x59\x82\x1d\x15\xab\xd6\x6b\x83\x65\x6f\x07\xba\x18\x37\xb5\xe6\xfd\xec\x8a\xa1\x26\x13\x75\x52\x21\x33\x76\x6d\xdb\x3c\x7a\x8d\x16\x72\x5a\xdd\x3a\x0b\x89\x16\x8d\xe6\x53\x6a\x79\xb4\xaa\xe1\x05\xed\x7a\x81\xab\x39\xfe\xc5\x19\xbb\xc7\x6a\x76\xbe\x37\xab\x8f\x8d\xab\xbf\xea\x43\xf2\x3f\xe1\x81\x57\x9d\xfc\x4f\x3a\xe0\x60\x47\xbf\x16\x4a\x83\x6c\xa1\xb1\xa5\xb6\xbe\x3f\x7f\xe1\x65\x74\x77\x52\xc8\x6f\x31\xfb\xd9\xf8\xa9\x43\xa8\x2b\xd8\x4e\xc4\x6f\x87\xcf\x8f\x63\x9a\xdf\x9c\x11\xd5\xab\x52\xa7\x42\xd0\xfc\x15\xe3\x7f\xe1\xcb\x31\xe3\xcb\x9b\xc7\x67\x7c\x79\x36\x3c\xe3\xcb\x3f\x5b\x07\xbd\xac\xed\x6f\x5e\x12\x72\xb9\x58\xa0\xc5\x48\x17\xc3\xba\x32\x1d\x32\x92\x2d\x65\xb5\xde\x0b\x2c\x9d\x5d\xa5\x4f\xaa\x12\xff\x26\x17\x93\xa9\xa9\xee\xdd\xcd\xf6\x55\xf2\x7f\x98\x21\xfb\xee\x8f\x9a\xef\x08\x42\x38\xfa\x59\xb5\x96\x9b\x79\x29\x8a\x71\x8b\x12\x58\x20\xbc\xbb\xd5\xfd\x2f\x5f\x83\x3a\xb5\xbd\xe4\x7f\xf3\x2a\x4c\xd5\x4c\xbd\xc6\xd6\x70\x3c\xdb\x66\x9a\x9c\xec\x33\xdd\x4f\xea\x57\x11\xef\x27\xea\x3f\x21\xf9\xbf\x00\x00\x00\xff\xff\x20\xc8\x3d\x58\x9c\x44\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 17564, mode: os.FileMode(438), modTime: time.Unix(1527686485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

