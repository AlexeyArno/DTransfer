// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x3a\xeb\x6e\xdb\xb8\x9a\xff\x17\xd8\x77\x60\x55\x0c\xe2\x74\x28\x4a\x94\x2c\xcb\x56\xed\x00\x33\x99\x16\x1d\x6c\xbb\xb3\xd8\xce\xff\x80\x96\x68\x9b\x08\x4d\xea\x50\xf4\x25\x2d\xfa\xee\x07\xa4\x64\xc7\x89\x45\x59\x49\xe7\x28\xad\x2d\x93\xdf\x8d\xdf\x9d\x94\xa6\x6f\x0a\x99\xeb\x87\x92\x82\x95\x5e\xf3\x9b\xff\xfe\xaf\x69\xf3\x0d\x00\x00\xd3\x15\x25\x45\x73\x7f\xb8\xa6\x95\x7e\xe0\xf4\xd9\xa0\xb9\xd0\x4e\x91\xb2\xa4\x0a\x7c\x3f\x9f\x33\xd7\x8e\x15\x7a\x95\x01\x9c\x86\xe5\xfe\x3d\x08\xde\x81\xaf\x54\x03\xbd\xa2\xa0\x62\xdf\x28\x90\x0b\x7b\x5f\x2a\xb9\x54\xb4\xaa\xc0\x9c\x28\xf0\x2e\x68\xa7\xb4\xa2\x6c\xb9\xd2\x07\x52\xed\x30\xa5\xac\x98\x66\x52\x64\x80\xcc\x2b\xc9\x37\x9a\x5a\x9e\x1f\x04\x99\x73\x0a\x72\xce\xca\x92\x89\xa5\x93\x85\x01\xc8\x80\xa2\xb9\x1e\x84\xe5\x1e\x02\x9c\x9c\x7e\xa5\x49\xb9\xbf\xb6\xf4\x3e\xb1\x82\x82\x15\xe1\x8b\x17\x2d\xe0\x47\xfb\xf0\x33\x9d\x54\x07\x9a\x94\xd3\x35\x15\xba\x02\x7a\x45\x34\x58\x93\x7b\x0a\x36\x65\x3f\x6e\x28\x67\x2a\xe7\xf4\x92\x4d\x62\xb7\x22\x8f\xca\xee\x80\x99\x4b\x55\x50\x95\x01\x1c\x96\x7b\x50\x49\xce\x0a\xf0\x76\x3c\xbe\x0d\x93\xb4\x13\xc1\x57\xa4\x60\x9b\x2a\x03\x93\xf8\x25\x76\xec\x67\x31\x63\xa3\xa3\xc1\x42\x63\xaf\x76\x3c\xad\x88\x38\xb0\xb0\xf7\x0b\xa9\xd6\x00\x84\x28\xae\xba\x30\x0c\x54\x06\x94\xd4\x44\xd3\x41\x58\xd0\xa5\x8b\xfe\x33\x5b\x4f\x83\xb6\xf8\x71\x06\xd5\x5c\x16\x0f\x0e\xdb\xcd\x49\x7e\xbf\x54\x72\x23\x8a\x0c\xbc\x8d\x3e\xc6\xe9\xf0\x37\x87\x08\x8d\x95\xe3\xd0\x6d\xc1\x85\x14\xda\x5f\x90\x35\xe3\x0f\x19\xf8\x4d\x31\xc2\x21\xf8\x44\xf9\x96\x6a\x96\x13\x08\x2a\x22\x2a\xbf\xa2\x8a\x2d\xba\xf0\x8d\xd3\x66\x00\x47\x4e\x2e\x9a\xee\xb5\x4f\x38\x5b\x8a\x0c\xe4\x54\x68\xaa\x5c\x56\x27\x45\xc1\xc4\xd2\xd7\xb2\x34\x72\x3b\x09\xe6\x92\x4b\x95\xbd\xa5\xa1\xf9\x73\xc0\xf8\x3b\x3a\xbf\x67\xda\xd7\x72\x93\xaf\xfc\x9c\x70\x2e\x37\x3a\x03\x42\x8a\x3a\x25\xb0\xbf\xbe\x82\xaf\x64\x41\x14\x73\xc6\xeb\x81\xc4\xa6\xa2\xca\xaf\x28\xa7\xf9\x29\x81\x4b\xc8\xf7\x26\xa3\x3a\x70\xff\x47\x8a\x7f\x6d\xa8\x92\x0a\x7c\xfa\xfb\xcb\x67\x37\x8d\xb5\xfc\xe6\xa0\xf0\x91\x29\xba\x90\x7b\x27\x6a\x8d\x5e\x39\xb0\xff\x34\x46\x10\x54\x83\x0f\xfb\x92\x4b\x45\x55\xf0\xa1\x58\xd2\x4e\x62\xe6\x6a\x27\xf6\xbf\x52\xf8\xa5\xa2\x0b\xb6\xa7\x05\xd8\x52\x55\x31\x29\x20\xc8\x37\x4a\x51\xa1\xf9\x43\x37\xc9\xb6\xab\xda\x94\xa5\x54\x9a\x16\x60\xfe\x00\x6e\x57\x4a\xae\x29\x20\xa2\x00\x7f\x95\x54\x91\x56\x21\x5b\x32\xeb\xf9\xc8\xdb\x7c\x25\x65\x45\x1d\x71\xb5\xe0\x92\xe8\x4c\x99\xac\xf7\x4a\xfa\xc8\x24\x07\x07\xf5\x27\x9e\x8d\xdb\x3d\xbb\x1f\x93\x43\xee\xbf\xcb\xa5\xd0\x84\x09\xaa\x2e\x24\xf9\xc4\x1d\x47\x6b\xa2\x96\xcc\xe4\xd8\x8d\x96\x97\xea\x40\x07\x99\xe0\xdd\x93\xac\xa4\x68\xf1\xde\x65\xa5\x5e\x76\x3a\x2e\xb1\x94\xcc\x38\x6a\xa7\xc5\x80\x35\xd9\xe5\xfc\x14\x25\x97\xd2\xc9\xc2\x5e\x5d\x94\x76\x8d\x32\xd2\xd0\x95\x75\x1e\xeb\x96\xa2\x9c\x68\xb6\x75\xd5\x2d\xe3\x08\x23\xb7\x4a\x6b\xe3\xe1\xc8\x0d\xd1\x3b\xa9\x5a\xfd\x64\xb8\x7d\xf9\xfd\x7c\x4e\xc8\xdd\xdd\x82\xf1\xf6\xd0\x69\xb4\x97\x0f\xcd\x5f\xab\x0c\x8d\xa1\x38\x5d\xe8\xf7\x2d\xe4\xfb\x07\xd7\xdd\x7c\xa3\xb5\x14\x55\x9f\x20\xeb\x28\x1f\xaf\x0e\x86\x26\xa4\xa2\xa6\xa2\xf6\x5a\x0a\xaa\xb3\x8e\xb8\x2b\x98\xe9\x52\xa4\x72\x15\xf6\x53\x2d\xbd\x56\x49\x44\xb0\x35\xd1\xf4\x7c\xc6\xc1\xf3\xb4\x0b\x22\x9c\x83\x10\x61\x57\xfb\x73\xac\xa7\xfd\x50\xda\x34\x41\x72\x83\xd6\x18\xd1\x21\x51\xbe\x51\x95\x54\x19\x68\x42\xbf\xd3\x10\x6b\xb2\xf7\x4d\x16\xa4\xc2\x15\xff\x05\xab\x4a\x4e\x1e\x32\xc0\x04\x67\xc2\x15\x8b\xe7\x65\xad\x23\xe4\x0a\x9a\x4b\x45\xea\xf5\x3b\x60\x2f\xae\x3d\x5b\xc9\xad\x33\xad\xd5\xf1\x64\xb3\x68\x3f\xd2\x36\x32\x6a\xf1\x3b\x49\x36\x09\x6e\xd2\x46\x17\x1c\x03\xa0\x8e\x1e\x47\xe2\x69\x61\xff\xb6\xe6\x7c\xc7\xca\x0b\x75\xa8\x23\x97\x3d\xdb\x17\x44\xc8\x9d\xab\x9f\xb4\xbf\x1d\x39\xe7\xb8\x1c\x13\x4f\x3f\x57\x72\xdf\xce\xe9\x92\xb9\xfc\x35\x78\x07\x64\x49\x72\xa6\x1f\x32\xb3\x79\x68\x2f\x7c\xa0\x9f\x76\xdb\xd9\xb7\xe9\xdc\x4a\x74\x57\x6d\x97\xdd\x3a\xbf\x5c\xfa\x1d\xc9\xce\xe5\xc1\x5b\xda\x78\xf0\x5d\xa5\x89\x72\xb9\xdb\x79\x8a\x88\x2a\x40\x49\x45\x7d\x26\x7c\xb9\x71\x05\x6b\xbf\xd0\x7f\xe6\x2b\x49\xf8\x8b\x13\x70\xef\x57\x2b\x52\xc8\x5d\x66\x36\x82\xf6\xff\xd0\x7c\xf8\x76\xbf\xaa\x96\x73\x32\x08\xa1\xfd\x43\xc3\x89\x6b\x1f\x77\x62\xdc\xf4\xd5\x7a\xea\x8c\xf7\x56\x39\x13\x23\xe7\xe8\xa9\x98\xf8\xa2\x8c\xf8\xf5\x12\xd6\x63\x3d\x44\xec\xc8\x8f\x27\xba\x9a\xf4\xf3\x63\xc2\xa9\xd3\x8b\xea\xa4\xd5\x9e\x06\xc1\x4b\x1a\xa0\xc7\x16\xf6\x42\x34\xbc\xb4\x3b\x7f\xba\xa9\x9f\x06\x27\xc7\x66\x53\xb3\x83\x7f\xba\xb1\x7f\xde\x2f\x4c\x0b\xb6\x05\x39\x27\x55\x35\xf3\xce\x9b\x7a\xaf\xe5\x54\xe0\x39\x56\x73\xf2\xe6\x81\x82\x68\xe2\x9b\xda\x3f\xf3\xe6\xa4\xa2\xe0\x38\xc1\x8a\x47\x28\x07\xc1\x36\xc2\xf5\xe9\xd1\x39\x5d\x93\x4b\x6b\xa2\x35\xc4\x9d\x1d\xb8\x99\x06\x05\xdb\xfe\x03\xe4\x6d\xa7\xfa\x84\x7e\x3d\xd2\xcd\xa0\x7b\xd2\xb0\x35\x04\x9f\xef\x29\x3a\xd5\x11\xfe\xf2\x1a\x5e\x2d\xb9\xfb\x99\xc5\x5b\xb0\x4f\xf5\x72\xda\xe2\xf6\xb1\xff\x59\x67\xd9\xb9\xa8\x3f\x0e\x50\x19\x98\x56\x25\x11\x46\x2d\x57\x67\x24\xae\x6e\x4c\x80\x4f\x03\x03\xe1\x12\xa1\x43\x09\x56\x3c\xfd\x50\xd2\x99\x57\x2f\xa4\x31\xa7\x65\xe3\x1d\x04\x7f\xd2\x0c\x5d\x72\xcc\x5b\x8b\xfb\xe6\xe5\xb2\xb4\x05\xec\x23\x74\xcb\xec\xa3\x6a\xaf\x8c\x29\xae\x3a\x04\x3b\x33\x5b\xdd\x05\x5d\x5a\x8b\x45\xb5\xaa\xfd\x7f\x9a\x53\xb6\xa5\x0a\xfc\xf9\x7f\x19\x68\xd4\xed\x94\xfb\x9c\x84\xe5\x66\x55\x7b\x6c\xbf\xfa\xf0\x36\xb8\xb2\x34\xca\x07\x5b\xc2\x37\x74\xe6\xe1\x28\x45\x21\x0a\x11\xf6\x6e\x8e\xb7\xd3\xa0\x86\xb9\xe9\x29\x4d\x50\xcb\xd0\xa5\xae\x16\x33\xb5\xc4\x81\x59\x8f\x2d\x09\xed\x21\xef\x8c\x1f\x8b\x68\x7b\xa2\x36\x25\x1c\x49\x1f\xbb\x26\x0f\x48\x91\x73\x96\xdf\xcf\x3c\x5b\xfd\x3e\x4b\x52\x0c\xae\x5b\x71\xab\xed\x12\x9c\xba\xed\xb3\xba\xe9\x81\xfd\x9a\x8b\x6a\xe6\xad\xb4\x2e\xb3\x20\xd8\xed\x76\x68\x17\x23\xa9\x96\x41\x14\x86\x61\x60\x99\x59\x90\x6c\xcf\x99\xb8\x6f\x03\xc4\x93\xc9\x24\xb0\xb3\xde\xe1\xf8\x6c\xe6\x61\x84\xeb\xd0\xb9\x25\x25\xb9\xc3\x1e\xd8\xcf\xbc\xb0\xdc\x7b\xe0\xa1\xf9\xb6\x2d\xde\xcc\x8b\xed\x8f\xba\xc4\x1d\x7e\x6d\x19\xdd\xfd\x2e\x0d\x02\x08\x41\x32\x04\xc9\xd0\x03\xb6\x52\xcd\x3c\x6a\x1f\x84\xf8\x27\x5d\xb4\xa0\x3b\x70\x84\x7b\x6f\x85\xcd\xaa\x92\xe4\xd4\xe4\x4c\x5a\x51\xb5\xa5\xce\x5c\xb4\xbc\x94\xf4\x2f\x01\x58\xa0\x92\xe8\xd5\x41\xbe\x05\xe3\x3c\x3b\x3c\x44\xf0\x40\x31\xf3\xbe\x24\x31\x8c\xd2\xcf\xf6\x33\x0f\x21\x1e\xa2\x38\x99\xf8\x18\xa3\xd1\x10\xc3\x68\xe4\x47\x23\x18\x8d\x56\xe1\x2d\x8e\xec\x48\x12\x43\x0c\x87\xd8\x00\x41\x0c\xa3\x74\x1b\xde\x62\xd8\xcc\x1d\xbe\x60\x94\x42\xbc\x0a\x7b\x85\x0b\xb8\x3d\x12\x33\xa4\x8f\x4c\xa2\xf4\x9b\x17\xfc\x03\xab\x8b\x52\x98\x0c\x8d\xf0\x18\x47\x30\x19\xc2\xd0\x08\x3f\x1e\x8f\x61\x08\xa3\xf4\x6b\x33\x6e\xee\x61\x58\x19\xb1\xeb\x81\x28\x35\xb3\x0d\x64\x32\x84\x96\xca\x37\x60\xa8\x45\x3d\x97\x85\x63\x14\xe1\x04\x46\x30\x82\x8f\xb7\x69\x85\x71\x7d\xdf\xfc\xab\xa2\xc4\x3f\x0e\xf9\x51\xf2\x75\x18\xa2\x74\x5c\xc3\xc2\xe8\xb2\x0a\xa6\xc1\x7f\xca\x47\x3e\xda\xeb\xa0\xc5\x31\x0a\x71\x0a\x71\x8a\xc6\xc9\x88\x8f\x51\x8a\x27\x10\x27\x08\x87\xf8\x36\x4e\x51\x18\x0e\x61\x1c\xa3\x61\x84\x61\x3c\x42\xa3\xd1\x04\xc6\x43\x73\x87\xcd\xd7\xf0\x13\x1e\xa3\xd1\x64\xd4\x4f\x6d\xb9\x1f\xa2\x24\x4e\x60\xe8\x87\x68\x9c\x9a\x1f\xe9\xc4\x0f\xd1\x28\x8c\x7c\x8c\xc2\x61\x5c\xf3\xf6\x1b\xde\x26\xa1\x8e\xb1\x11\x2b\x9e\x18\x8d\xa1\x34\x39\xfe\x38\x95\xf8\xd5\xae\xf4\x44\x09\x87\x15\x25\xcd\x8a\x8c\xac\x23\x1c\xc3\xd0\xc7\x08\x8f\x22\x3f\x44\x31\x1e\xf9\x18\x0d\x47\x46\xe4\xf1\x70\x6c\x00\xe2\x70\x64\x97\x64\x6f\x53\x0b\x39\xb4\x18\xa3\x49\x72\xba\x98\x9e\x6e\x95\xd7\x64\x0c\x45\x18\xa2\x71\x92\xd4\x9c\xe0\x09\xd7\xca\x4a\x03\x8d\x34\x69\x3d\x0e\xed\xf8\xa9\xd9\xa2\x9a\x0e\x34\x74\x30\xb4\x52\x42\x83\x96\x98\x6d\x90\x11\xad\xa7\x93\xc7\x29\x8a\x26\x23\x18\x0f\xd1\x68\x6c\x4d\x9e\x0e\x53\x18\x27\x47\xe3\x27\xdf\xc0\x17\x3c\x41\x51\x64\x1c\x64\x85\x47\x28\x1e\xc7\xdc\x1f\x23\x3c\xc1\x3e\x1e\x22\x3c\x1e\x7f\x3e\x4e\xff\xac\xb3\xb7\xcf\x4e\x4d\x89\x68\x1d\xef\xee\xa9\xfb\x61\x4c\xdf\xf8\x3e\x98\x32\x51\x6e\xea\x66\x61\xc1\x38\xad\xbc\xa6\x41\x33\x3f\x3c\x50\x1f\xeb\x1d\xfb\x3f\xf0\x78\xb7\xde\x70\xcd\x4a\x4e\x83\x1b\xe0\xfb\x67\x4f\x2e\x73\xc5\xca\xb6\x92\x5f\xc8\x7c\xb3\xa6\x42\xa3\x25\xd5\x1f\xea\x27\xd8\xbf\x3f\xfc\x59\x0c\x9a\x56\xf3\xea\x1a\x91\xa2\xf8\xb0\xa5\x42\x7f\x66\x95\xa6\x82\xaa\x81\x67\x6b\xb1\x07\x41\x0d\xf2\x71\x23\xf2\xb6\xad\x6e\x10\xb8\x89\x1f\x4b\x7b\x1b\xfd\x2b\x4b\xff\x0a\x02\x5b\xb2\xaf\xcf\x29\xef\x98\x28\xe4\x0e\xd9\x73\x8b\x3f\x88\x26\x60\x06\xbe\x9b\x60\xcb\x80\x67\xba\x61\xef\x47\x8b\x34\x5b\xa2\x00\x27\x95\xbe\x5b\x30\x01\x66\xa0\xed\x81\xc0\x62\x23\x6c\xa3\x0b\x4e\x9a\x0c\xe7\x66\x57\x54\x92\x53\xc4\xe5\x72\xe0\x7d\xa2\x9c\x4b\xaf\x45\x4e\x73\xb1\xc5\xe0\xb9\xb8\xc8\xc8\x3a\x9b\xd5\xb2\xba\x38\x74\xd9\xa6\x69\xba\xae\x11\x13\x82\xaa\x4f\x7f\x7f\xf9\x3c\xf3\xea\xb6\xfb\xd1\x1d\xde\xbc\x79\xe3\xb5\x53\xfe\x41\xb9\xf3\xa9\xda\x4b\xb9\xba\x58\xf4\x3c\xba\xeb\xb2\x01\xa7\xb4\x04\x03\xcd\xd6\x14\x02\x45\x2b\xc9\xb7\xf4\xda\x75\x2e\x3e\x38\xa2\x0d\x2e\x81\x9a\xab\xa2\xfa\x6f\xb6\xa6\x72\xa3\x4f\x10\xaf\xc1\xf7\x0b\xcd\x73\x43\x7a\xe0\x3a\xd7\xb1\xcb\x84\x46\x62\x87\x2f\xfc\xb8\x3e\x8a\xd7\xa2\xa0\x0b\x0a\x39\xec\x88\x07\x5b\xc2\x5d\x4e\x63\x9c\xbc\xf6\xef\x18\x8d\xde\x99\x3d\x83\xd3\x29\x17\x4c\xdc\xe0\x71\xf8\x2a\xf7\x3b\x3d\x4d\xb8\x46\xb6\xc2\xa1\xc7\x97\x32\x66\xc0\x6b\x5e\xb8\xc0\x63\xfb\xca\x85\xc3\x49\xfa\xb0\xa8\x0f\x14\xba\x78\x78\xbf\x2e\x98\xf8\xd5\xbb\xc0\xc7\x3d\x13\x04\x60\xbe\x59\x82\x1d\xd3\xab\x93\x83\xd0\xca\x8d\xc0\x16\x83\x43\x1e\x99\xce\x2e\x68\xd0\x5c\xd6\x91\x07\x71\x18\xc2\xa3\x2d\x9d\x69\xa5\x97\x6a\x0e\x07\x44\x07\xad\xe4\x9c\x95\x33\xcf\xbe\x52\x43\x36\x5a\xc2\xa7\x1f\xd7\xde\x05\xaf\xfe\xd1\xe9\xce\xee\xa9\x93\x64\xba\x60\xa2\x83\xc6\x3f\x9c\x85\x3a\x96\x1f\x96\x7b\x58\xbf\x4a\x54\x7f\xda\x17\xc0\x7e\xc2\xfb\x2e\x3a\x78\x3f\xe7\xfb\x79\x27\xbf\x14\x46\xbd\x6c\xe1\xb0\xa5\xb3\x46\x3f\x3f\x82\xbb\x3a\xc9\xfc\x60\x06\xa8\xa9\xd9\x48\x13\xb5\xa4\x1a\xd9\xd3\x89\x5f\xbd\x5f\x5a\x64\xb4\x6f\x11\x5c\x3a\x6a\x03\xa7\x99\xee\xb1\xad\x70\x06\x4a\x53\x52\xe9\x5e\x53\x25\x08\x47\x4c\x6c\xe5\x3d\x1d\x5c\xc9\x92\x8a\x82\xa9\x2b\x97\x4f\xbb\xaa\x31\xe2\x54\x2c\x4d\x51\xee\x0c\xe7\x56\x54\x63\x26\x5b\xc9\x5f\xa4\x75\x93\xa9\x1b\xec\x76\xb2\xaf\x92\xff\x66\x86\xc3\xeb\xef\x0d\xdd\x76\xc0\x8a\xb3\x9c\x0e\x42\x98\x5e\xbf\xd4\x1f\xce\xcf\x1e\x9f\x3a\x84\x21\xdf\x7e\x10\xdf\x61\x6b\xdb\x08\x76\x9a\xba\x97\x47\x4d\x83\x27\x0d\xee\x34\x68\xce\xf3\xa7\x81\x7d\x4f\xf6\xdf\x01\x00\x00\xff\xff\x22\x98\x6e\xec\x3f\x2b\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 11071, mode: os.FileMode(438), modTime: time.Unix(1527419087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

