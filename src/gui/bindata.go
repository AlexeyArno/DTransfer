// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3b\x69\x8f\xdb\x38\x96\xdf\x17\xd8\xff\xc0\x28\x68\xd8\x95\x48\xb4\x2e\x5b\x96\x63\x17\xd0\x9d\x4e\x90\x60\x2b\xdb\xc1\xa6\xb1\xc0\x7c\x2a\xd0\x12\x6d\x13\x45\x8b\x1a\x8a\xf2\x91\x20\xff\x7d\x40\x5d\x25\xbb\x48\x59\xe5\x74\xe6\x50\x80\x92\x2c\xf2\x1d\x7c\xf7\x23\x95\xf9\x8b\x98\x45\xe2\x98\x62\xb0\x11\x5b\x7a\xfb\xdf\xff\x35\xaf\xee\x00\x00\x30\xdf\x60\x14\x57\xcf\xf5\x35\xcf\xc4\x91\xe2\xb3\x97\xf2\x82\x7b\x8e\xd2\x14\x73\xf0\xed\xe9\x98\xbc\xf6\x24\x16\x9b\x19\x70\x02\x3b\x3d\xbc\x01\xa3\x57\xe0\x0b\x16\x40\x6c\x30\xc8\xc8\x57\x0c\xd8\xaa\x78\x4e\x39\x5b\x73\x9c\x65\x60\x89\x38\x78\x35\x52\x63\xda\x60\xb2\xde\x88\x1a\x95\x7a\x4e\xca\x32\x22\x08\x4b\x66\x00\x2d\x33\x46\x73\x81\x0b\x9a\xef\x12\xb4\xa4\x18\x44\x94\xa4\x29\x49\xd6\x5a\x12\x72\xc2\x0c\x70\x1c\x89\xa1\x9d\x1e\x4c\xe0\x8c\xdb\xb7\x60\x9c\x1e\x6e\x0a\x7c\x1f\x48\x8c\xc1\x06\xd1\xd5\xb3\x16\xf0\x5d\xfd\xfa\x4c\x26\x59\x8d\x13\x53\xbc\xc5\x89\xc8\x80\xd8\x20\x01\xb6\xe8\x01\x83\x3c\xed\x47\x0d\x46\x84\x47\x14\x5f\xd2\x89\xa7\x17\x64\x23\xec\x8e\x39\x4b\xc6\x63\xcc\x67\xc0\xb1\xd3\x03\xc8\x18\x25\x31\x78\x39\x9d\xbe\xb5\xc7\x41\x27\x80\xc5\x51\x4c\xf2\x6c\x06\x42\xef\x39\x7a\xec\xa7\x31\xa9\xa3\x46\x61\xb6\xd4\x97\x1a\x4e\x70\x94\xd4\x24\x8a\xe7\x15\xe3\x5b\x00\x6c\xe8\x65\x5d\x10\x72\xd6\x0c\x70\x26\x90\xc0\x43\x3b\xc6\x6b\x1d\xfe\x33\x5d\xcf\x47\x2a\xff\xd1\x3a\xd5\x92\xc5\x47\x8d\xee\x96\x28\x7a\x58\x73\x96\x27\xf1\x0c\xbc\x74\xdf\x7b\x81\xff\xab\x86\x85\x4a\xcb\x9e\xad\xd7\xe0\x8a\x25\xc2\x5a\xa1\x2d\xa1\xc7\x19\xf8\x95\x13\x44\x4d\xf0\x01\xd3\x1d\x16\x24\x42\x26\xc8\x50\x92\x59\x19\xe6\x64\xd5\x05\x2f\x8d\x76\x06\x1c\x57\x4b\x45\xe0\x83\xb0\x10\x25\xeb\x64\x06\x22\x9c\x08\xcc\x75\x5a\x47\x71\x4c\x92\xb5\x25\x58\x2a\xf9\xd6\x22\x8c\x18\x65\x7c\xf6\x12\xdb\xf2\x9f\x6e\x4e\xce\x33\xc6\x67\x31\x5e\xa1\x9c\x0a\xcd\x24\x6b\x8f\x97\x0f\x44\x58\x82\xe5\xd1\xc6\x8a\x10\xa5\x2c\x17\x33\x90\xb0\xa4\x8c\x1b\xe4\x8f\x2f\xe0\x0b\x5a\x21\x4e\xb4\x4e\x5d\xa3\xc8\x33\xcc\xad\x0c\x53\x1c\xb5\x11\x5c\x02\x7e\x90\x61\x57\x03\xfb\x3f\x2c\xf9\x7b\x8e\x39\xe3\xe0\xc3\x9f\x9f\xee\xf4\x38\xb6\xec\xab\x06\xc3\x7b\xc2\xf1\x8a\x1d\xb4\xa0\x25\x78\xa6\x81\xfe\x28\x35\x95\x60\x01\xde\x1d\x52\xca\x38\xe6\xa3\x77\xf1\x1a\x77\x22\x93\x97\x1a\xd9\xff\xb2\xc4\x4a\x39\x5e\x91\x03\x8e\xc1\x0e\xf3\x8c\xb0\xc4\x94\x4a\xe2\x38\x11\xf4\xd8\x8d\x52\x75\x65\x79\x9a\x32\x2e\x70\x0c\x96\x47\xf0\x76\xc3\xd9\x16\x03\x94\xc4\xe0\x8f\x14\x73\xa4\x64\x52\x11\x7e\x9f\xbe\x79\x19\x6d\x18\xcb\xb0\xc6\xf9\x56\x94\x21\x31\xe3\x32\x34\x5e\x89\x1f\xca\x08\xa2\xc1\x7e\x62\xfe\x8e\xda\xfc\xfb\x11\xa9\x13\xc4\x7d\xc4\x12\x81\x48\x82\xf9\x85\x4c\x30\xd6\x3b\xdb\x16\xf1\x35\x91\x81\x38\x17\xec\x52\xb2\xe8\x40\x33\x7a\x75\x12\xba\x38\x8e\xdf\xe8\xb4\xd4\x4b\x4f\xcd\x12\x53\x46\xa4\xa1\x76\x6a\x0c\x14\x2a\xbb\x1c\xc4\xdc\xf1\xa5\x98\xb3\x2a\xae\x2e\x4c\xfb\x4a\x18\x81\xad\x0b\x4d\x8f\xc9\x8d\x63\x8a\x04\xd9\xe9\x92\x9b\x34\x84\x89\x5e\xa4\xa5\xf2\x1c\x57\x3f\xa3\x77\xe4\x2d\xe4\x33\x73\xd4\xcb\xef\x67\x73\x09\xdb\xdf\xaf\x08\x55\xbb\x4e\x25\xbd\xc8\x97\xff\x94\x3c\x54\x8a\xa2\x78\x25\xde\x28\xd0\xf7\x77\xae\xfb\x65\x2e\x04\x4b\xb2\x3e\x4e\xd6\x91\x63\xae\x76\x86\xca\xa5\xdc\x2a\xed\xf6\x5a\x0a\x2c\xa3\x4e\x72\x1f\x13\x59\xca\x30\xae\xcb\xfe\x6d\x29\x5d\x2b\x24\x94\x90\x2d\x12\xf8\xe9\x88\x86\x66\xbb\x54\x42\x94\x02\x1b\x3a\xba\x1a\xa9\xc9\xa7\xfd\x40\x54\x92\x40\x91\x04\xab\x94\xa8\xe1\xa8\xca\xed\xa0\x72\xfd\x4e\x45\x6c\xd1\xc1\x92\x51\x10\x27\x3a\xff\x8f\x49\x96\x52\x74\x9c\x01\x92\x50\x92\xe8\x7c\xf1\x69\x5a\xeb\x70\xb9\x18\x47\x8c\xa3\x72\xfd\x9a\xb9\x17\xd7\x3e\xdb\xb0\x9d\x36\xac\x95\xfe\x54\x44\xd1\x7e\xa8\x0b\xcf\x28\xd9\xef\x44\x59\x05\xb8\x50\x85\x17\x34\x0e\x50\x7a\x8f\x26\xf0\x28\xc8\xbf\x2c\x29\xdf\x93\xf4\x42\x1e\xea\x88\x65\x67\xcd\x83\x0b\xf5\xb1\xfa\xa4\x46\xee\x88\x39\xcd\x72\xa4\x3f\xfd\x58\xca\x7d\xb9\xc4\x6b\xa2\xb3\xd7\xd1\x2b\xc0\x52\x14\x11\x71\x9c\xc9\x0e\x43\x9d\xf8\x40\x3f\xe9\xaa\xc9\xab\x64\x5e\x70\x74\x9f\xed\xd6\xa6\x4a\x21\x82\xa5\xba\xb1\x25\xc7\xe8\x41\x0e\x6a\x96\x73\xe6\x30\xd6\x92\xb2\xe8\xa1\x3b\x1a\x76\x14\x06\x75\xf1\x70\xb9\x04\xd1\x04\x5d\x95\xb9\x93\x2d\x5a\xe3\xee\x20\xf2\x6c\xce\x7a\x5a\xfa\x5f\x21\xd8\x67\xc6\x8c\xdd\x85\xa5\xaa\xc2\x31\xc0\x28\xc3\x16\x49\x2c\x96\xeb\x02\x63\xbf\x30\xdb\xb2\xec\xf0\x82\x20\x3b\xd2\x6d\xd3\xac\xf6\x75\xc1\xd3\x85\x77\x06\xcb\x86\x43\xe7\x1a\xcc\xe5\x2f\x5d\x37\xce\x0e\x56\xb6\x41\x31\xdb\x77\x26\x85\x96\x8c\x82\x7e\x66\x84\x28\xe6\xdd\x91\x5a\x1d\xfb\xc1\x73\xaa\xbe\xc7\xba\xfd\x82\xeb\x3d\xb7\x25\x81\x94\xe9\x6c\x5c\xe6\xe3\x9a\xae\xdf\xaf\x72\xd5\x54\x3b\xa0\x31\x1b\xb7\x63\x8b\xa3\x3b\x76\x80\x53\xe5\x78\xba\x29\x3b\xcc\x57\x54\x2a\x79\x43\xe2\x18\x27\xfd\xa4\x70\xba\xe9\x33\x1f\xb5\xb6\x55\xe7\x4b\x16\x1f\x4f\x37\x7e\x4e\xe1\xe7\x31\xd9\xdd\xfe\x8d\xe5\x1c\x7c\xfc\x3c\x03\xf3\x2c\x45\x09\x20\xf1\xc2\xd8\x1e\x3f\x7e\x36\x6e\x1d\x37\x80\x36\xb4\xa1\x33\x1f\xc9\x91\xdb\xf9\x48\x4e\x7f\x8a\x01\x44\x14\x65\xd9\xc2\x78\xda\x0f\x1a\x8a\x5d\xa7\x73\xa8\x6a\x67\xd7\x00\x31\x12\xc8\x92\x65\xe3\xc2\x58\xa2\x0c\x83\x66\x40\x72\x54\xff\xd0\x20\x54\x21\x2e\x77\x27\x9f\xe2\x95\x8a\x2e\x91\x96\x33\xee\x8b\x17\xca\xd5\x5d\x83\xbe\x68\x72\x4e\xf0\x97\x6f\xba\x09\x74\x0f\x4a\xb2\x12\xe1\x79\x3b\xda\x29\x0e\xfb\x97\x6b\x68\x29\xd2\xfe\x99\xc6\x2f\x58\x41\xbb\x3b\xea\xa3\xff\x27\x4d\x49\xe7\xa2\x7e\xaf\x67\xb5\xcc\x75\xf0\x04\xc5\xe0\x56\x86\xc9\xca\x6c\x35\x2c\x74\x08\xa1\x60\x4f\x1c\x53\xbc\x30\xca\x85\x54\xea\x2c\xc8\x18\x35\xe3\x27\x75\xf4\x25\xc3\x7c\x5b\xc0\xbe\x78\x3e\x2f\x2a\x87\x7f\x9c\xad\x18\x7d\x14\xed\x40\xaa\x62\xd0\xc1\xd8\x13\xb5\x95\x05\xf4\xa5\xb5\x14\xa0\x85\x68\xff\x0f\x47\x98\xec\x70\x15\x3e\x4a\x71\x6b\xf9\x7e\x8a\xa2\xa0\x56\x88\xb6\xa9\xdc\xfb\xd0\x96\xb0\x2c\x95\xc2\x07\x3b\x44\x73\xbc\x30\x9a\x48\x75\x12\xb4\xca\x39\xb7\x3d\xb9\x19\x95\x3c\x74\x89\x4b\xa1\x26\x85\x1f\xc8\xf5\x14\x89\x55\xed\xf2\x5a\xff\x29\x00\x8b\x72\x5a\x25\x84\x06\x75\x53\x70\x1b\x80\x25\x11\x25\xd1\xc3\xc2\xc8\x04\xe2\xe2\x8e\xa1\x78\x78\x63\x00\x41\x04\xc5\x0b\xe3\x8b\x7c\x07\x18\x07\x32\x1a\x93\x24\xc7\x5a\x67\xcc\x76\xeb\xb6\x4d\x37\x45\x89\x01\x0e\x5b\x9a\x64\x0b\x63\x23\x44\x3a\x1b\x8d\xf6\xfb\x3d\xdc\x7b\x90\xf1\xf5\xc8\xb5\x6d\x7b\x54\xf0\x50\x4c\x99\x1d\x28\x49\x1e\x54\x13\x9d\x30\x0c\x47\xc5\xa8\x51\x6f\xc8\x2e\x0c\x07\x3a\xa5\x47\xbd\x45\x29\xba\x77\x0c\x70\x58\x18\x76\x7a\x30\xc0\xb1\xba\xef\x08\xde\xff\xc6\xe4\x5b\x60\x03\xd7\x73\xa1\x33\xf6\xea\xbb\x01\x8a\x7c\xb7\x30\x70\x71\xdc\x66\xb5\xda\xb0\x04\xef\x81\x02\xe2\x4d\xc1\xe5\x2c\x4b\x51\x84\x65\x0c\xc5\x19\xe6\x3b\x6c\x94\x69\x7d\x61\x8c\x1d\x57\xd2\x2c\xcb\x85\xfa\x67\x97\x19\xac\x0b\xde\x3f\x53\xd4\x1d\xaa\xe4\xd4\x14\x89\x4d\xcd\xef\x8a\x50\x6a\xf1\x9c\xe2\x19\xde\xe1\x84\xc5\xf1\x9b\x88\x92\xf4\xf4\x8d\x01\xe2\x85\xf1\xc9\xb5\x3d\x18\x84\x8e\x19\x86\x70\xe2\x4e\xef\xfc\x10\x7a\x76\x60\xba\xd0\x0d\xfd\xc8\xf2\xe1\x78\x12\x58\x2e\x0c\x9c\xd0\x72\x6c\xe8\x7a\x53\xcb\x85\xee\x64\x62\x39\x3e\x1c\xbb\x4e\xf9\x43\xd6\x6f\x96\x13\x40\xc7\x73\x4d\x5b\x3e\xd8\xe3\x89\xe9\x78\xd0\x75\x83\xe6\xd7\x04\x8e\x83\xe9\xce\x09\xa7\x30\xf4\x23\xdb\x74\xe1\xd4\xf3\x2c\x1b\xda\xc1\xb8\x1c\x0b\xcd\xf6\xcc\x30\xf2\xa1\x3b\xf5\x4c\xdb\x0c\x61\x38\x1e\x9b\x36\xf4\xc7\x8e\xd9\xa2\x19\x00\x00\xa8\x33\xf6\xa1\x3f\xf5\xac\x30\x80\x9e\xe7\x45\x8e\x0b\x27\x53\x2b\x80\x63\x7f\x6c\x3a\x36\xf4\xa7\xa1\xe5\x4c\xa0\xef\x87\xa7\xbf\xbe\xb8\xf2\x1e\x38\xa6\x63\x07\xd0\x09\x5c\xf3\x54\x00\x5f\x0d\x20\x65\xb7\x30\x5e\xbe\x2f\x2e\x63\xd4\xe9\xa4\x6b\x6d\xc4\xcf\x76\xeb\xdb\x0b\x01\x55\xe9\x72\x75\xb7\x75\xe2\x71\x2c\x3d\x73\xb8\xcf\x28\xcf\xba\x9d\xec\xdf\xdd\xcb\x26\x41\x58\xdf\x7b\x7a\x59\x0b\xe2\x27\x79\x59\x97\x50\x7f\xd0\xcd\xa6\x36\x1c\xfb\x9e\x69\x7f\xf0\xc6\x30\x08\x83\xc8\x0a\xe1\x74\x3a\x2e\xfd\x65\x1a\x4e\xcd\x29\xb4\x1d\xbf\xfe\x51\xde\x76\x4e\x38\x81\xd3\xa9\x27\xfd\x4b\x7a\x82\x9c\x2f\xa7\x79\xe6\xc9\xb4\xea\xb6\xf1\x7d\x18\xf8\x93\xa8\xc2\x5b\xbd\xb5\xda\x00\x15\xfa\xff\x2f\x6f\x6f\xc3\x29\xf4\xfd\x92\xb0\x19\xda\xd0\x77\x03\xd3\x36\x6b\x3e\xbf\x82\x4f\x25\x79\xd7\xb4\x65\x5f\x65\x55\xe8\x0b\xbe\x27\x35\xdf\x61\x9b\xef\xf0\x8c\xef\x0e\xa6\xc3\x53\xa6\xe5\x0a\xfb\xf3\xed\x3a\x3e\x0c\xa6\x4e\xc5\xb9\x6b\x4f\x60\x30\x91\xac\x37\xfc\xfe\xa5\x3e\xac\x77\x61\x8d\x13\x97\x89\xb3\xde\x17\x69\xb9\x71\xf1\xee\xcc\x8f\xdf\xa2\x24\xc2\x14\xe4\x29\x65\x28\xfe\x8f\x4d\x9a\x8e\x0b\xc3\xa9\x5b\xdf\xfb\xb8\xf3\x29\xc4\xcf\x71\xe7\xb7\x94\xfd\x34\x77\x76\x3c\x07\x4e\x6d\xdf\x74\xec\x09\xf4\x43\x87\x06\x63\x18\x7a\x13\xab\xbc\x45\x13\x18\x86\x96\xfc\x63\x16\x4f\xce\x14\x7a\xae\x67\xda\x96\x3b\x86\x9e\xe3\x16\xf9\xb2\x99\x52\x8e\xba\xe5\x73\x39\xc1\xb4\x69\x89\x29\x30\xcb\xdb\x9d\x67\xc3\xf1\xd8\x37\xc7\xd0\xf5\xdd\x4b\xb0\xc5\xf8\xb4\x22\x5d\x3e\xd6\x0c\x98\x0d\x03\xb4\x8d\x7f\x72\x57\x20\x36\x9d\xa9\x2b\xa3\xc0\x65\x04\x51\xb3\xb6\x72\xc4\x2d\x9f\x1b\xee\x4b\xe4\xd5\x1a\x4e\x48\xc9\xc4\x1d\x3d\xa2\x57\x82\x2b\xc5\xe7\x36\xe2\xbb\x3b\x93\xfd\x3f\xc9\xdb\x15\x10\xad\x8e\x86\xb2\x75\xe9\x30\xf2\xa1\x2a\xc5\xcb\x59\xfd\x30\xce\x5f\x58\x16\x98\x93\x24\xcd\xcb\x1e\x65\x45\x28\xce\x8c\xaa\x2f\x94\x3f\x0c\x50\x1e\x44\x35\x6d\x27\x78\x7c\xda\xe6\x54\x90\x94\xe2\xd1\x2d\xb0\xac\x27\x1f\xe4\x44\x9c\xa4\xaa\x4e\x23\x66\x51\xbe\xc5\x89\x80\x6b\x2c\xde\x95\x1f\x66\xfd\x76\xfc\x18\x0f\xab\x0e\x77\x70\x03\x51\x1c\xbf\xdb\xe1\x44\xdc\x91\x4c\xe0\x04\xf3\xa1\x51\x44\x32\xc3\x04\xe5\x94\xf7\x79\x12\xa9\xbe\x16\x1a\x8d\xf4\xc8\x9b\x8e\x42\x85\x7f\x50\xe0\x1f\x98\xa0\xe8\x31\x6e\x9e\x62\xde\x93\x24\x66\x7b\x88\x0f\x02\xf3\x04\x51\x48\x92\x1d\x7b\xc0\xc3\xc1\xf6\xf8\xf1\xf3\xe0\x46\x15\x92\x2b\x88\x62\xbf\xf8\x77\x24\x10\x58\x80\x6f\xd2\xe5\x67\xc0\x90\x6d\xbb\xf1\x5d\xc1\xff\x0e\x71\x40\x51\x26\xee\x57\x24\x01\x0b\xa0\x3a\xf4\x5e\xe5\x49\xd1\x91\x83\x56\x37\xa4\xdd\xdb\x4c\x32\x46\x31\xa4\x6c\x3d\x34\x3e\x60\x4a\x99\xa1\x58\x99\xbc\xc8\x6a\x78\xce\x2e\x94\xbc\x2e\x16\x25\xaf\x3a\x0a\x5d\xda\xac\xba\xc3\x1b\x48\x92\x04\xf3\x0f\x7f\x7e\xba\x5b\x18\xe5\xfe\xc0\xa3\x01\xbd\x78\xf1\xc2\x50\x63\xfe\x8e\xa9\xf6\xcb\x91\xe7\x52\xd5\x90\xe8\x44\xf3\xd8\x7f\xde\xc0\x22\x46\xc3\xea\x40\x01\x2c\xc0\x40\xca\x64\x70\x05\xd2\xa6\xc2\x56\xe0\x6c\x9f\xff\x5c\x83\xfb\x31\xef\x5f\x87\x5c\xb1\xe7\xaa\x78\xd5\xb2\xbe\xba\x33\xd0\x9d\xbf\x5c\x23\x84\x0e\xc1\x5e\xa7\xa9\xb3\x85\x2b\xd7\xd8\xb1\xca\x56\xe1\xf4\x2f\x5f\x66\x97\x7e\x7f\xb6\xdc\x14\x52\x3b\x7f\xd5\x29\xc7\x8c\x62\x9c\x82\xa1\x20\x5b\x6c\x02\x8e\x33\x46\x77\xf8\x46\xf7\x8d\xc4\xb0\x01\x1b\x5e\x9a\x2a\xaf\x0c\x8b\x3f\xc9\x16\xb3\x5c\xb4\x00\x6f\xc0\xb7\x0b\xbb\x61\x15\xea\xa1\xee\xa3\xd3\x62\x99\xa6\xe4\x58\x13\x33\xbf\xdf\x34\xec\x29\x04\x74\x41\x20\xf5\x16\xf7\x70\x87\xa8\xce\xb4\x64\x32\x28\xf3\x80\x07\x27\xaf\xc0\x0e\x51\x6d\xf0\x5e\x91\xe4\xd6\x99\xda\x57\x85\xe9\xf6\xf1\x40\x6d\x09\x8f\x5f\xf1\x2e\x80\x51\x7d\xa1\xeb\x4c\x8b\x6f\x74\xaf\x09\xa6\x27\x27\x04\x5d\x34\x8c\xd7\x2b\x92\xbc\x36\x2e\xd0\xd1\x8f\x8c\x46\x60\x99\xaf\xc1\x9e\x88\x4d\xeb\xa0\x36\xd3\x03\x90\xd5\xb0\xce\xb7\xf3\xc5\x05\x09\xca\xab\x30\xe4\xa1\x67\xdb\x66\xa3\x4b\x6d\x68\xe8\x25\x9a\xfa\xc4\xa7\x96\x8a\x2c\xfb\x17\x46\xf1\x0d\x36\xca\x05\x33\x4f\xff\xdc\x18\x17\xac\xfa\x7b\xa7\x39\xeb\x87\x5a\x45\xc7\x8a\xa8\x8e\xe4\xea\xeb\x2f\xce\xd6\x1d\xcb\xb7\xd3\x83\x59\x7e\x7b\x5e\xfe\x2d\xfe\xc7\xc0\x0f\x58\xdf\x45\x03\xef\x67\x7c\x3f\x6e\xe4\x97\xdc\xa8\x97\x2e\x34\xba\xd4\x56\xbf\xe7\x67\x6a\x83\x56\x85\x04\x16\x40\xf6\x98\x02\x0a\xc4\xd7\x58\xc0\xe2\xb8\xe1\xb5\xf1\x8b\x82\xc7\xee\x74\x99\x61\xf1\xe9\xf8\xf1\xf3\x90\xa4\xcf\x4e\x97\xc5\x59\xec\x29\x4f\x24\xbd\x82\xfe\x1d\x5b\x0f\x29\x5b\x3f\x9b\xbe\xec\x9e\x4e\xc9\x53\xb6\xee\x99\xf8\xb4\xfc\x3c\x36\x2b\xda\x20\xa1\xeb\x2b\x58\x8a\x93\x98\xf0\x81\xce\x9f\x75\x15\x3b\xa4\x38\x59\xcb\xc2\xbd\x33\x94\x29\x41\xa5\x89\x16\xd5\xfe\xb3\x2c\x4e\x66\xa9\x0a\x5a\x8d\xf6\x2a\xfe\x6f\x17\x8e\x7d\xf3\xad\xc2\x3b\x80\x10\x0e\x5e\x17\xa3\x59\xbe\xcc\x04\x1f\xb6\x66\x02\x0b\x04\x37\xcf\xf5\x86\xa7\x47\xa9\xa7\xba\x97\xf8\xd5\xdf\x25\x74\x15\x8b\xb2\xa0\xea\x54\xb6\x06\xe3\xf9\xc9\xd9\x49\xe3\x3c\x1f\x55\x9f\x37\xcc\x47\xc5\x7f\x2b\xfb\x47\x00\x00\x00\xff\xff\x75\xe9\x25\x68\x6e\x36\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 13934, mode: os.FileMode(438), modTime: time.Unix(1527616680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

