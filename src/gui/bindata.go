// Code generated by go-bindata.
// sources:
// data/index.html
// data/main.js
// data/progress.css
// data/style.css
// DO NOT EDIT!

package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xed\x6f\xe2\x38\x1a\xff\x7c\x2b\xed\xff\xe0\xa1\x1a\x01\x12\x09\x81\xc2\xb5\x64\x00\xed\xb6\x9d\xb9\x5b\x69\x57\xba\x0f\xf3\xe1\xbe\x8d\x9c\xf8\x49\xb0\x1a\xec\xc8\x36\x14\xa6\x9a\xff\xfd\xe4\xbc\x00\x85\x38\x24\x40\x47\xba\x6e\x43\x45\x53\xc7\xcf\xef\x79\xb1\xfd\xbc\x38\xee\xf8\x03\xe1\xbe\x5a\xc7\x80\x66\x6a\x1e\x4d\x7f\xfd\x65\x9c\xfd\x46\x08\xa1\xf1\x0c\x30\xc9\xee\xf3\x6b\x1c\x51\xf6\x88\x04\x44\x93\x86\x54\xeb\x08\xe4\x0c\x40\x35\x90\x86\x98\x34\x14\xac\x54\xd7\x97\xb2\x81\x66\x02\x82\x49\x23\x16\x3c\x14\x20\xa5\xad\xdb\xce\x01\x4a\x7a\x14\xa2\x24\x4f\xf6\x1a\xf3\xcb\xce\xf9\x7f\xf3\x39\x53\x98\x32\x10\xe8\xb9\xb8\xab\xbe\x9e\x28\x51\x33\x17\xf5\x7b\xd7\xf1\xea\x53\x71\xb7\x1f\xc5\xcd\x47\xd8\x97\x31\xe5\x4b\x10\x41\xc4\x9f\x5c\x34\xa3\x84\x00\x33\x30\xd6\xd7\x0c\x68\x38\x53\x2e\xea\xdd\x1a\xe5\xd3\xd7\x1c\x8b\x90\x32\xcb\xe3\x4a\xf1\xf9\xd1\xde\x1e\xf6\x1f\x43\xc1\x17\x8c\x58\x3e\x8f\xb8\x70\xd1\xd5\xed\x68\x34\x18\xdd\x55\xa3\xa1\x73\x1c\x82\x8b\xac\x39\xff\x6e\x45\x94\x01\x16\x56\x28\x30\xa1\xc0\x54\x4b\xf1\xb8\x83\xae\x82\xa1\xfe\xe8\x9b\x91\xfe\xb4\x6b\xe2\xca\x57\x81\x7d\x02\xef\x91\xaa\x2d\x66\xca\xa3\x83\x1c\xe4\xe8\xaf\x9e\xe3\x7c\xec\xa0\x40\xf0\x79\x2b\x63\xd4\xee\x20\xc5\x5b\x39\xb3\xd3\xb8\xbd\x86\x22\xfc\x35\x50\x2f\x09\x29\x20\x06\xac\x5c\x94\xfe\xb6\xca\xa6\x62\x40\x23\x05\xc2\x45\x7a\xd9\x50\xe2\x3e\xfc\xf7\x0f\x2d\xce\x57\x81\x99\x0c\xb8\x98\xdb\x7f\x51\x5f\x70\xc9\x03\x65\x6f\x24\x93\x0a\x0b\x75\xaf\xe7\xad\x54\x62\xd2\xcc\x64\x6c\x76\x10\x30\xb2\xdb\x9c\x48\xdc\xec\xa0\x7f\x65\x84\x5f\xb5\x97\x71\xca\x54\xc8\x07\xcd\xe3\x2b\x4b\xce\x30\xd1\x2b\x94\x32\x09\x4a\x4f\x8f\x78\x85\xfa\xf1\x0a\x89\xd0\xc3\x2d\x3d\x61\xd2\x1f\xbb\x57\x0a\xa8\x97\xc8\xc5\xd0\x2e\x27\xd6\x46\x4f\x41\x40\x58\xda\x3e\x0b\xe9\xa2\x41\xa9\xd3\xc8\x74\xa9\x41\x51\xb9\xf3\x89\x1e\xd6\xf6\x70\x15\xdf\xee\x7c\x3c\xdf\xbf\xe6\x6e\x32\x48\xae\xb2\xf9\xcc\x99\xb2\x24\xfd\x0e\x2e\xea\xf5\x4b\x21\x75\xb8\xb3\x70\x44\x43\xe6\x22\x1f\x98\x02\x71\xac\x73\x3e\xf6\x0e\xb2\xf4\xb0\x3b\x07\x83\xde\x1f\x56\x5c\xa0\xb9\x3a\x0e\x8c\x1c\xd2\xbf\x94\xd7\xef\x0d\x46\x1e\x09\x3a\xe8\xca\x19\xdc\x3a\x1e\x5c\xca\xeb\x9f\x07\x5b\xc3\xeb\xa7\x8c\x32\xaf\x9f\x31\xbb\xa4\xd7\x3f\x4f\x11\x93\xd7\x3f\x0b\xf5\x92\x90\x3f\xd7\xeb\xa7\x32\x1e\x78\xfd\x54\xe2\x8b\x79\x7d\xc3\x42\xeb\x95\x2e\x34\xa3\xd7\x3f\x09\xed\x72\x62\xed\xea\x49\xbf\x53\x16\xba\xb9\x8b\xf6\x78\x05\xcf\x5f\x93\xaa\x3e\x9b\x4c\x3e\xa5\xa7\x01\x55\x94\x33\x37\x75\xe1\xc8\xb1\xff\x29\x11\x60\x09\xc7\x84\x3c\x95\x54\x9e\x4a\xc9\x4f\x24\xac\x4f\x75\x5a\x8c\xb4\xa4\x12\x34\x06\x72\x34\x56\x5e\xa8\x24\x30\x7b\xdb\xd4\xd1\xea\x6f\x3d\x57\x13\x1e\x96\x54\x3c\x6e\xe9\xb0\xd5\x49\xa7\x72\x7f\x38\xec\xa0\xed\x57\x32\xa1\xdb\x05\x9d\x13\xeb\xc5\x58\x00\x53\xfb\x8f\x8f\x3e\xad\xcc\xe8\xa6\x6e\xe7\x97\x7c\x15\x6f\xed\x36\x5c\x26\x8e\x58\x83\x21\x81\xb0\x44\x2e\xd4\x1f\x7e\x7c\x21\xc9\x61\xc3\x50\x8f\x83\x19\xe0\xc8\xe3\x9b\x7d\xb8\xfd\x86\xba\x51\xbf\x20\x9b\x78\x83\x5a\x1e\xe6\x36\x6f\x4f\xc9\xc3\x04\xe5\xcd\xe9\xf8\xc6\x14\xdc\x64\x04\x5b\x45\xd3\xd2\x65\xe0\xc4\xab\xe4\xeb\x68\x56\x70\x12\x25\x3f\x8d\xae\x36\xd1\x69\x31\xd3\xc6\xbe\xa2\x4b\x38\x1a\x32\x73\xeb\x61\x46\xe7\x38\x0d\xe5\x9b\xb0\xeb\x61\x91\x85\x5e\x89\xfa\x32\x9b\x37\x88\xb2\x80\x32\xaa\x8e\xa6\x31\x17\x45\xbc\x18\xd8\x89\x19\x08\xc1\x2c\x04\xf1\xb3\x12\x10\x73\x75\x9a\xa2\x75\xd0\x95\x3f\xb8\xf6\xaf\xab\x56\xca\x47\xab\xd3\xf3\x60\x6b\x54\xa7\x00\xc3\x60\xe8\x65\xd5\x69\xc6\xec\x92\xd5\x69\x8a\x7f\xaa\x22\xa6\xea\xf4\x2c\xf3\x5c\x12\xf2\xe7\x56\xa7\xa9\x31\x0f\xaa\xd3\x54\xe2\xca\xd5\xe9\x59\x2b\xee\x22\x35\x40\xef\xf7\xbb\xfb\xd1\xfd\x7b\x0d\xf0\x5e\x03\xbc\xd7\x00\xef\x35\xc0\x71\x25\xdf\x6b\x80\xff\x27\x05\x6b\xc5\x97\xf3\x5b\x7f\xcb\x5d\xda\x23\xac\x03\x81\xe7\x20\x8b\x33\xd2\x67\x03\xbd\xbe\x74\x2e\x84\x9e\x77\x87\x25\xe6\xf9\x46\x9a\x83\x9c\x7a\x2a\xe9\x4b\x71\x13\x5c\x52\x5d\x18\x11\x6b\x31\xfa\x2d\xf1\x71\x7f\x3f\xb5\xdf\x84\xc6\xe3\x6e\xd1\x79\x93\xec\x10\x8a\xc7\xc9\xda\x90\x52\x6d\x8e\x96\x0c\x8d\x05\xea\xe1\x3b\xc0\xc3\x7e\x05\x62\x5d\x49\x88\xc0\x57\x16\x8d\x8f\xb0\x76\x8a\x6b\xe3\x02\xc8\xc3\x16\x5b\xe7\xba\x06\xfc\x18\x13\x42\x59\x68\x29\x1e\xbb\x68\x78\x0e\x93\xcd\x69\x9d\x98\x53\xad\xbf\x81\x61\x10\xf1\x24\x79\xa7\xe1\x4c\x19\x6c\x99\xa6\xac\x21\x8f\x08\x30\xc1\x89\xa1\x57\xf2\x7e\xf6\x29\x7b\xe9\x7b\xe3\x38\xa7\xca\xcd\xf8\xd3\xb7\x80\x46\x50\x28\x6f\x2a\xca\x95\x3f\xd0\x9f\x42\x41\x32\x7d\x22\x08\xd4\xa7\x02\xf8\xea\x03\x64\x79\x0b\xa5\x38\x93\xaf\x3e\x50\xe9\x36\x02\x1c\x3e\x31\x70\xde\x7d\xc3\x81\xa3\x48\x87\x2a\x69\x18\x93\xa2\x17\x3f\x25\x24\x15\xe5\xf5\x35\x50\x66\x9e\xca\x52\x6f\x9d\x82\x80\x08\x2b\xba\x34\x6d\x86\x64\x86\x75\xd1\x30\x5e\xa1\xbe\x79\x0b\x2a\x3d\x98\xe5\x22\xed\x62\x74\xd7\x5e\xe2\x6b\x8c\xdd\xf7\x8e\x4c\x98\x3d\x47\x32\x8f\x03\x3c\xa7\xd1\xda\x45\xcd\xff\x60\x9f\x06\xd4\xe7\xcd\x0e\xf2\x17\x42\x9a\xc5\xde\x3d\x9e\x60\x06\xcf\xab\xbf\x2f\x5f\xbe\x94\x39\x2e\x02\x3e\x17\xd9\xd6\x12\xe3\x0c\x3e\xfd\xe3\xd4\xc1\xf2\xa2\x45\xf5\x99\x55\x50\xa6\x5e\x0f\x46\xb7\x0f\xa6\x9d\xa2\xcd\xcb\xc7\xf4\x6c\x9c\x1e\x05\xc9\x23\x4a\xd0\x55\x7f\x74\xeb\xdc\x8d\xca\x54\xdc\x1c\xb9\x88\x57\xc8\xea\xc7\xab\x12\x9a\x6a\x9a\x0a\x20\xe7\x28\xfa\xf9\x66\x70\x7f\x6d\xaa\xc7\xcd\x8a\xde\x3d\x5c\x7f\xbe\xee\xd5\x53\xd4\x48\x53\x14\x90\x3c\x08\x29\x33\xa8\xc1\x63\xec\x53\xb5\x76\x91\x63\x5f\x57\x83\x7b\x19\x71\xc7\xdd\x9d\x23\xa9\x63\x1d\x70\xf7\x43\x31\xa1\x4b\xe4\x47\x58\xca\xed\xe9\xd3\xed\xe9\xcf\xfd\xd3\xa3\x65\x54\x68\x6f\x0f\xc5\x9c\x4d\xa0\x83\xdd\x95\x74\xd7\xd8\xc4\xed\x25\x3f\x0f\x8b\xc6\x74\xdc\x25\x74\x69\xec\x6e\x10\xba\x84\x66\xcf\x28\x05\x3d\x0b\x0d\x85\x3d\xbe\x50\x55\x8c\x94\x87\xbc\xc6\xd4\xb6\xed\x32\x41\x0a\xd9\x64\xf1\xbd\x31\x75\x3e\x16\x8a\x56\xd0\xf6\xeb\x2f\x46\xf1\x9b\x3a\xf6\x35\x0b\xf8\xef\xf2\x4e\xe2\x63\x9a\x2a\x99\x87\x45\x67\x72\x31\x66\x53\x01\x3e\xd0\x25\x88\x71\x37\xf9\xb3\xd0\xa6\x2f\xa9\x12\x60\x44\xc9\xa4\xb1\x49\xc7\xca\xd8\x1c\x47\xec\xa6\x38\x45\x5a\x19\xac\x5d\x41\xff\x2c\x3f\x28\x35\x40\xd9\x3c\xdc\x5e\x0f\x54\x80\xaf\xb8\x58\xbb\xa9\xc9\xb4\xea\x4d\x7f\xc6\xb9\x04\xf6\x8d\xe4\x0f\x9b\x53\x1d\x0a\x32\x2b\x96\x83\x96\xce\xa1\x54\xee\xec\x68\x78\xfa\x47\x23\x31\x76\xca\xb1\x91\x2b\xf9\x22\xce\xa3\xd4\x8d\x65\xef\x3c\x00\xe9\xb8\xd2\x98\xde\x27\x14\x5b\xf9\x3f\x8c\xbb\x69\xf7\xda\xbc\x13\x37\x57\x83\x35\x22\x54\x62\x2f\x02\x32\xbd\xd3\x94\x65\x8c\xab\x2e\x8a\xf1\x07\xcb\x42\x63\xca\xe2\x45\x3a\xf7\xf4\x8a\x94\xf9\x11\xfa\x64\x79\xa2\x34\x9d\xda\x8c\x08\xda\xde\xcd\x17\x91\xa2\x71\x04\xdd\x29\xb2\xac\x83\x82\xc6\x17\x34\x2e\x9a\x7d\x84\xfb\x8b\x39\x30\x65\x87\xa0\x3e\x47\xa0\x6f\xef\xd6\x7f\x90\x56\x36\xf8\xcd\xb6\x8d\x09\xf9\xbc\x04\xa6\xfe\xa4\x52\x01\x03\xd1\x6a\xf8\x11\xf5\x1f\x1b\x1d\x94\x76\xf9\xb2\x60\x7e\xd1\x26\x84\x11\x39\x31\x74\x29\x70\xd2\x23\xc7\x3d\x44\x7e\xa2\x8c\xf0\x27\x3b\x49\x29\x1f\xb0\xc2\x68\x82\x9e\x63\xac\x8b\xa2\x86\x9e\x9f\x8d\x1f\x05\xd2\x04\x0b\x96\x8c\xe8\x8e\xd0\xad\xb6\xb1\xc2\x4a\xf0\x61\xa5\x40\x30\x1c\xd9\x94\x2d\xf9\x23\xb4\x9a\x3c\x06\x46\xa8\x68\x9a\xb6\x5c\x96\x58\x20\x2d\x07\x9a\x1c\x88\x68\xeb\xf6\x42\x2a\x1a\xb4\x0a\x3b\xdb\x11\xb0\x50\xcd\xa6\x93\x9e\xd3\x7e\x2e\x43\xb5\x65\x44\x7d\x68\x39\x9d\x9b\xb6\xa1\xca\x3d\xc2\x62\x32\x71\x4c\x96\x28\xb2\xb6\x9d\x09\x93\xda\xda\x4c\x67\x1a\xff\x6c\xa1\xb5\x6d\x09\xea\x77\xa5\x04\xf5\x16\x0a\x5a\xcd\x7c\x35\x35\xdb\xe7\x40\x26\xff\x56\x92\x25\x25\x68\xa2\xb3\x12\x43\xe1\x0f\x91\x2c\xae\xef\x2a\x72\x12\x30\xe7\x4b\x78\x6d\xf9\x7b\xb5\x36\x6a\x8e\xac\xe5\x5d\x47\xde\xb6\x29\x63\x20\xfe\xfd\xf5\xaf\x3f\xd1\x24\x99\xb4\x86\x39\x5d\x98\xd3\x95\x2c\xaf\xcd\xd2\x35\xae\x2e\x03\xe2\xbe\x77\x7c\xe1\xb1\xc6\xdd\x2c\x35\x1c\x77\x93\x7f\x67\xfa\x5f\x00\x00\x00\xff\xff\x5b\x36\x65\xaf\xe6\x34\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 13542, mode: os.FileMode(438), modTime: time.Unix(1527379621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x4d\x0a\xc2\x30\x10\x46\xf7\x85\xde\x21\x74\x93\x04\xa4\x17\x70\x27\x54\x10\xbc\x44\x4d\x3e\xeb\xd0\x3a\x23\xed\xa4\x28\xe2\xdd\xa5\xfe\x14\x5d\x28\xb3\x99\xc5\x7b\xef\x8b\x12\xd2\x11\xac\x65\x03\xad\x3a\x4c\xef\xea\xb2\x89\xce\x86\x83\xc8\x00\xeb\xcb\x3a\xc6\x6a\x04\xeb\x96\x06\x05\xa3\x77\x45\xe8\x28\xb4\xc5\xc2\x3c\x91\x75\xe2\xe0\x97\x79\xf6\xb3\xb4\x43\x43\xfc\x37\xf4\x20\xde\x9d\xe9\xf6\x89\x83\x92\xf0\xc7\x84\xf3\xd7\x3c\x33\xc6\x18\x9c\x15\x3d\xd7\x5d\x49\x3c\x4a\x0b\x67\xe5\x04\x8e\xd4\x5b\x9f\x67\xb7\x2f\x79\xce\xce\xee\x8b\xb8\x07\x00\x00\xff\xff\x42\x49\xa1\x37\xf5\x00\x00\x00")

func dataMainJsBytes() ([]byte, error) {
	return bindataRead(
		_dataMainJs,
		"data/main.js",
	)
}

func dataMainJs() (*asset, error) {
	bytes, err := dataMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/main.js", size: 245, mode: os.FileMode(438), modTime: time.Unix(1527375930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProgressCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdf\x6f\xa3\x38\x10\x7e\xaf\xd4\xff\x61\xa4\xaa\x6a\x2a\x41\x64\x68\xb8\x6d\x58\xad\x74\xb7\x3d\xe9\x74\x0f\xf7\xb6\x0f\xf7\x76\x32\x30\x10\xab\xc1\x46\xb6\x77\x9b\x6d\xb5\xff\xfb\xc9\x18\xd2\x10\x20\x10\xaa\x55\x37\x52\x4a\x45\x2b\x7b\xe6\x9b\x19\xff\xf8\xe6\xe3\xf2\x62\x5e\x48\x91\x49\x54\xea\xbf\x58\x70\x4d\x19\x47\x09\x2f\x97\x17\x00\x00\x4f\x2c\xd1\xab\x10\x7c\xef\xae\xd8\x7c\xbc\xbc\xf8\x71\x79\xb1\x63\x5e\x1b\x89\x6f\x28\xd3\xb5\x78\x0a\x61\xc5\x92\x04\xf9\x47\x3b\xbc\x42\x96\xad\x74\x08\xde\x7d\xe9\x6b\x86\x72\x2a\x33\xc6\xdd\x48\x68\x2d\xf2\xc6\x4c\x44\xe3\xc7\x4c\x8a\xaf\x3c\x71\x63\xb1\x16\x32\x84\xab\xfb\xe5\x72\xb1\xfc\xdc\x9e\x67\x39\xcd\x30\x04\x37\x17\xcf\xee\x9a\x71\xa4\xd2\xcd\x24\x4d\x18\x72\x3d\xd3\xa2\x70\xe0\x2a\x0d\xcc\x63\xfe\x59\x9a\xe7\xf6\x00\x86\x7a\x33\xc4\x13\x46\x8f\x4c\xbf\xfa\x5b\x3c\x07\x08\x10\xf3\xf2\x08\xb9\x76\x20\x95\x22\x9f\x55\xa0\xb7\x0e\x68\x31\xab\x81\x87\x91\xdf\x9a\xa0\x78\x2b\xc2\x54\x77\x89\x05\x52\x1d\x82\xfd\xeb\xd6\x5b\x9d\xb2\xb5\x46\x19\x82\x39\x46\x2c\x09\xff\xfc\xf7\x6f\x13\xe6\x8b\xa4\x5c\xa5\x42\xe6\xf3\x7f\x58\x2c\x85\x12\xa9\x9e\x6f\x23\x2a\x4d\xa5\x7e\x30\xe7\x42\x69\xf9\xe9\xa6\x8a\x7d\xe3\x00\xf2\x64\x77\xb8\xcc\xe4\xc6\x81\xbf\x2a\xc7\x2f\xdf\x0b\xfc\x44\xea\xd4\xea\x05\x8d\xc4\xc6\x55\x2b\x9a\x98\x13\xcb\xb8\x42\x6d\xb6\xa9\xd8\x80\x5f\x6c\x40\x66\x11\x9d\x99\x8d\xb3\xbf\x73\x6f\xeb\x6c\x8e\xdb\x24\xcf\x69\xe1\xb6\xb9\xca\x04\xa5\x6b\xea\xf9\xaa\x42\x58\x6c\x2f\x4c\x95\x4f\xcf\x6c\xe7\xc4\xde\xed\x9d\x47\x74\xff\x9e\x93\xeb\xfe\xbb\x5b\x5f\xcb\xb4\xfc\xa9\xf7\x52\x70\xed\x2a\xf6\x8c\x21\x78\xfe\xd6\x54\xe3\x46\xbb\x74\xcd\x32\x1e\x42\x8c\x5c\xa3\xdc\x9d\xa8\xd7\x82\x80\x6b\x96\x81\xb4\x16\xc1\x0f\x3a\x0e\x53\x1d\x9e\xe0\x92\x24\xfe\x14\x56\xf0\x16\xcb\x28\x49\x1d\xb8\x22\x8b\x7b\x12\xe1\x14\x56\x18\x0f\x71\x04\x2b\x58\xd0\x8a\x15\x2a\xe0\xa9\xac\x30\x3e\xc1\x3e\x56\x18\x8d\x30\xd5\xfd\xe7\xb1\x82\x8d\xdd\x62\x05\x9b\xc9\x24\x56\xe8\x39\xa0\x5e\x30\xc8\x0a\x83\x9e\xd3\xc2\xed\xe6\xca\x9e\x19\xcf\xc2\xfa\xaa\x47\x62\xd3\xca\xa9\xcf\xe2\xb0\x7b\x15\x43\x9b\xa5\x67\x9a\x09\x1e\x5a\x7a\x00\x32\xff\x4d\x01\x52\x85\xbb\x81\xc6\x98\xa9\x31\x56\x62\x84\xd1\x61\x8b\x26\xbf\xb9\x4a\x4b\x56\x60\xd2\xe0\xb9\x09\x32\xa3\xff\x26\xdb\x4b\x6c\xde\x66\x9f\x4a\x3c\x57\x69\x51\xcc\x0c\x85\x39\x76\x1b\xfd\x20\x70\xe0\xf5\x55\x6e\xe6\x6d\x87\x71\x59\x59\x41\x25\x72\xbd\x3f\x3d\x38\x3b\x3a\xd0\x87\x63\x8d\x9b\x71\xb5\x98\xed\x0e\x1c\xcf\x51\xee\x22\x48\x30\x3b\x90\x03\xf8\xc1\x75\x23\x6a\x7b\x20\x30\x6b\xde\x0f\x30\x30\xfd\x61\x1f\x6e\x7f\xe0\x50\x57\xe8\xe8\x2c\x27\x5e\x51\xbb\xcf\x9d\x76\x41\xed\xa6\x76\xd2\xf5\x9c\x70\x31\xdb\x4e\xf5\x5a\x94\x95\x89\x0b\x52\x6c\xca\x57\xa3\x5b\x0d\x5a\x89\x61\x9b\x83\x06\xcd\xde\x30\xa7\xb1\x66\xdf\xb0\xd1\x1a\xea\x8c\x29\x67\x39\xb5\x2d\x66\xdb\x4a\x22\x2a\xab\x76\xa2\xc0\x57\xd5\xbe\x00\xe3\x29\xe3\x4c\x37\xda\xe1\x64\xef\x49\x8e\x7b\x1d\x2f\xa1\x3c\x43\xf9\xd6\x86\xd7\xaf\xa0\xad\xa7\x03\x57\xf1\xe2\x2e\xbe\xeb\x52\xe9\x83\x0a\x7a\x3c\xc4\x11\x0a\x1a\x31\x48\x83\xa8\x52\xd0\x15\xf0\x54\x05\x6d\xb1\xc6\x24\xd8\xa7\xa0\x47\x97\x38\xd5\xfd\xe7\x29\x68\x5b\x7c\x4b\x41\xdb\x4c\x3a\x15\x74\xe7\x09\x3c\x5a\x83\x79\x7f\x7c\x7e\x58\x3e\x9c\x35\xd8\x59\x83\x9d\x35\xd8\xa9\x17\x74\xd6\x60\xbf\x42\x31\x25\x2f\xdb\xe7\xf7\x9a\x0a\x1e\xf1\x7b\x2a\x69\x8e\xaa\x5b\x61\xbc\x40\xd5\x47\xa4\xc8\xe1\x65\x77\x29\x0a\x51\x7f\x74\x13\x20\x50\x42\x97\x5f\xe3\xa2\xcf\xac\x54\x5e\xa5\xe5\x0f\x9b\x81\xb9\xb7\xef\x17\xfe\x5d\x22\xff\x1f\x00\x00\xff\xff\x83\x08\x5e\xd0\x58\x19\x00\x00")

func dataProgressCssBytes() ([]byte, error) {
	return bindataRead(
		_dataProgressCss,
		"data/progress.css",
	)
}

func dataProgressCss() (*asset, error) {
	bytes, err := dataProgressCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/progress.css", size: 6488, mode: os.FileMode(438), modTime: time.Unix(1527376900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xcd\x6e\xa3\x30\x10\x3e\x83\xc4\x3b\x8c\x94\x43\x2f\xeb\x8a\xfc\xa9\x8d\x73\x4b\xdb\x9c\xf7\x0d\x2a\x63\x1b\x62\xd5\x78\x2c\x7b\x58\xe8\x56\x79\xf7\x15\xe0\x44\xd1\x4a\x4d\xc5\x05\xfc\xfd\xce\xe0\x0a\xd5\xe7\x57\x91\x03\x00\xf4\x46\xd1\x89\xc3\x6a\xb9\xf5\xc3\x7e\x3e\x22\x3d\x10\x13\xd6\x34\x8e\x83\xd4\x8e\x74\x28\xf2\x73\x91\x2f\xa2\xb6\x5a\x12\x33\xfe\x3f\x69\x59\x4e\xd2\x73\x91\x17\xf9\x63\x8d\xa1\x4d\xb8\x17\x4a\x19\xd7\x30\x42\xcf\x61\x7b\x4b\xf2\x01\x9b\xa0\x63\x7c\xf7\x68\x46\xff\x24\xa8\x2d\x0a\xe2\x10\x4c\x73\xa2\xd4\x45\xa2\xc5\xc0\x1b\xb4\x4a\xbb\x80\x2a\x9d\xd6\xe8\x88\xf5\x7a\xe4\x71\x78\x2a\xcb\x8b\xaf\xc3\xfe\xbd\x36\x56\x4f\x7e\xb3\x74\x21\x37\xe3\x33\x09\x93\xbf\xd5\x35\xed\xe1\xb6\x30\xab\x3a\x22\x74\xf1\xc7\xe2\xc2\x99\x56\x90\x2e\xf2\xaf\x22\xcf\x28\x08\x17\x0d\x19\x74\x1c\x84\xb5\x50\x3e\x2e\xe3\xbe\xc8\x33\xd6\xeb\xea\xc3\x10\xfb\x06\x4f\x4e\x72\x04\x52\xf0\xec\xe7\xf1\xc2\x0e\xda\x0a\x32\x7f\xf4\xe8\x96\xca\x70\xd8\xfa\x01\x56\xe5\xf5\x2f\xb5\x22\x34\xc6\x71\x28\xfd\x30\x41\xcb\xf1\x65\x86\xb3\x0a\x83\xd2\x81\x05\xa1\x4c\x17\x27\xe5\x78\x3a\x6d\xad\x16\xad\xb1\x9f\x1c\x1e\x7e\x0b\x69\x6a\x23\xf1\xe1\x17\xc8\x2e\xc4\x94\x36\x71\xa2\xf9\xab\x39\xa4\x1b\x91\xcd\x7b\x84\xc5\xf1\x78\x1c\x3f\xa7\xdb\xa1\xb4\xc4\x20\xe6\xb2\x0e\x9d\xde\x67\x97\xb9\x2a\xdb\xa5\xf5\x54\x42\x7e\x34\x01\x3b\xa7\xd8\xc5\x62\xbd\xd9\x3d\xbf\x1e\x6e\x1a\x56\x48\x84\xed\x3c\x5b\x44\x6b\x14\x2c\x56\xbb\xe7\xf2\xb0\xbb\x26\xc5\x93\x50\xd8\xcf\x63\xb2\x95\x1f\x6e\x08\x73\x60\xd0\xea\xdb\xbc\xb7\xa7\xcd\xcb\xfa\xe5\x7e\xde\xe1\x75\xfd\xb6\x5e\xde\xc9\xbb\x12\xce\xff\x02\x00\x00\xff\xff\x6b\xe5\x1e\x9e\x37\x03\x00\x00")

func dataStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_dataStyleCss,
		"data/style.css",
	)
}

func dataStyleCss() (*asset, error) {
	bytes, err := dataStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/style.css", size: 823, mode: os.FileMode(438), modTime: time.Unix(1527376898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html":   dataIndexHtml,
	"data/main.js":      dataMainJs,
	"data/progress.css": dataProgressCss,
	"data/style.css":    dataStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html":   &bintree{dataIndexHtml, map[string]*bintree{}},
		"main.js":      &bintree{dataMainJs, map[string]*bintree{}},
		"progress.css": &bintree{dataProgressCss, map[string]*bintree{}},
		"style.css":    &bintree{dataStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
