// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3c\xfd\x8f\xa3\x38\x96\xbf\xaf\xb4\xff\x83\x9b\xd6\x2a\xa9\x1e\x70\x30\xdf\xa4\x2b\x2d\xed\xd6\xf4\xa8\x5b\xd7\x73\x5b\x52\x8f\x56\x3a\x9d\x4e\x25\x07\x9c\xc4\x2a\x07\x73\xe0\x7c\xf5\xa8\xff\xf7\x93\x0d\xa4\x48\x82\x09\xa9\xd9\xd6\xee\x51\x52\x30\xf6\xf3\xf3\xf3\xfb\xb6\x31\x75\xff\x26\xe5\x89\x38\xe4\x04\xac\xc4\x9a\x7d\xf8\xf3\x9f\xee\xeb\x3b\x00\x00\xdc\xaf\x08\x4e\xeb\x72\x73\xdd\x97\xe2\xc0\xc8\x59\xa5\xbc\xe0\xae\xc0\x79\x4e\x0a\xf0\xfb\x65\x9b\xbc\x76\x34\x15\xab\x29\x40\xa1\x9d\xef\xdf\x83\xc9\x3b\xf0\x95\x08\x20\x56\x04\x94\xf4\x1b\x01\x7c\xa1\xca\x79\xc1\x97\x05\x29\x4b\x30\xc7\x05\x78\x37\xe9\xc6\xb4\x22\x74\xb9\x12\x0d\xaa\x6e\x98\x6f\x16\xcd\x52\xb2\x9f\x02\xe4\xd8\x7a\xa8\x9c\x97\x54\x50\x9e\x4d\x01\x9e\x97\x9c\x6d\x04\x51\x94\x7d\xcc\xf0\x9c\x11\x90\x30\x9a\xe7\x34\x5b\x6a\x09\x91\x00\x53\x50\x90\x44\x8c\xed\x7c\x6f\x02\xe4\xb7\x6f\xa1\x9f\xef\xef\x14\xbe\x4f\x34\x25\x60\x85\xd9\xe2\xa6\x69\x7e\xef\xae\x3e\xe3\x5c\xd9\xe0\x24\x8c\xac\x49\x26\x4a\x20\x56\x58\x80\x35\x7e\x26\x60\x93\x0f\x1b\x0d\x26\xb4\x48\x18\xd1\x49\x6e\x18\x2f\x1b\xf9\xba\x7a\x90\xa3\xe0\x7a\x60\xe6\xbc\x48\x49\x31\x05\xc8\xce\xf7\xa0\xe4\x8c\xa6\xe0\x6d\x14\x3d\xd8\x7e\xd8\xdb\xc1\x2a\x70\x4a\x37\xe5\x14\xc4\xee\x2d\xd2\x1e\x26\x57\x29\xc9\xa3\x58\x6d\x29\x55\xad\x68\x44\x81\xb3\x66\x14\x55\x5e\xf0\x62\x0d\x80\x0d\xdd\xf2\xbd\x56\xd2\x4d\x3f\x09\x3b\x05\x05\x17\x58\x90\xb1\x9d\x92\xe5\x9d\xbe\xcf\x99\x76\xdc\x4f\xba\xec\x52\x6b\xac\x73\x9e\x1e\x34\xd2\x9e\xe3\xe4\x79\x59\xf0\x4d\x96\x4e\xc1\x5b\xe7\x17\x37\xf4\xfe\xda\x2f\x71\xb7\x47\x29\x16\x3c\x13\xd6\x02\xaf\x29\x3b\x4c\xc1\x5f\x0b\x8a\x99\x09\x3e\x11\xb6\x25\x82\x26\xd8\x04\x25\xce\x4a\xab\x24\x05\x5d\xf4\xf5\x97\x6a\x2e\x95\x4f\x3b\x8a\x20\x7b\x61\x61\x46\x97\xd9\x14\x24\x24\x13\xa4\xd0\x69\x00\x4e\x53\x9a\x2d\x2d\xc1\xf3\x4a\xc3\x74\x0a\xc0\x19\x2f\xa6\x6f\x89\x2d\xff\x74\x30\x9b\xa2\xe4\xc5\x34\x25\x0b\xbc\x61\x42\x03\x64\xed\xc8\xfc\x99\x0a\x4b\xf0\x4d\xb2\xb2\x12\xcc\x18\xdf\x88\x29\xc8\x78\x56\x79\x1a\xfa\xf7\xaf\xe0\x2b\x5e\xe0\x82\x6a\x05\xdd\xa0\xd8\x94\xa4\xb0\x4a\xc2\x48\xd2\x46\x70\xad\xf3\xb3\x74\xe7\x9a\xbe\xff\xc1\xb3\xff\xdd\x90\x82\x17\xe0\xd3\x6f\xbf\x7e\xd1\xe3\x58\xf3\x6f\x1a\x0c\xbf\xd0\x82\x2c\xf8\x5e\xdb\xb5\xea\x5e\x6a\x7a\x7f\x96\x92\xca\x88\x00\x1f\xf7\x39\xe3\x05\x29\x26\x1f\xd3\x25\xe9\x45\x26\xaf\x6e\x64\xff\xc9\x33\x2b\x2f\xc8\x82\xee\x49\x0a\xb6\xa4\x28\x29\xcf\x4c\x29\xa4\x82\x64\x82\x1d\xfa\x51\x76\x5d\xe5\x26\xcf\x79\x21\x48\x0a\xe6\x07\xf0\xb0\x2a\xf8\x9a\x00\x9c\xa5\xe0\xef\x39\x29\x70\x27\x91\x1d\x0e\x7b\xf2\x0e\xfc\xc6\xf3\x4e\xe8\xb7\xeb\xc3\xe7\x47\x8d\x0d\x36\x7a\x3a\xe7\x42\xf0\xf5\x14\x38\x5a\x55\x1d\x44\x05\xec\x19\x8a\xe7\x38\xa1\xe2\x30\x05\x36\xf4\x3b\x86\xb8\xc4\xd6\x39\xc9\xc7\x26\xc4\x74\xc7\x97\x26\x02\x3d\x25\x3c\x13\x98\x66\xa4\xb8\x92\x24\xf8\x7a\xdb\x5c\xe3\x62\x49\xa5\x0f\xdf\x08\x7e\x2d\xce\xf4\xa0\x91\x3e\x97\xe7\x53\xab\x8a\x45\x7d\xae\xf9\x25\x6c\x14\x84\x61\x41\xb7\xa4\x17\xfc\x24\x5a\xea\x21\xab\x69\xd4\x9e\x28\xea\x23\xb3\xed\x90\x0b\x92\x76\xa3\xfc\xfe\xe7\x3f\x5d\x56\x76\x28\xdd\x51\x12\x39\xa7\xd2\xfc\x34\x72\x58\x30\x8e\xc5\x14\x14\x92\x8f\xd7\x5d\xb3\xe3\x5f\xf3\xa4\x0b\x75\xf5\x61\xda\xd5\x32\x0b\x6d\x9d\xc3\xed\x90\x83\x26\x1c\xf0\x7c\x1a\x5c\x4b\x54\x90\xde\xa6\x86\xc7\x13\xc5\x9f\x29\xea\x9e\xfe\x40\x21\x41\xc6\x71\x4a\x8a\xa7\x72\x85\x53\xbe\xbb\x62\x17\x3d\x89\xd3\x00\xbb\x18\x9c\x00\x0d\x49\xd4\x5a\x7a\xae\x81\x60\x64\x21\xa6\x91\x3e\x1f\x93\x72\xea\xb7\xd0\xb6\xea\xcf\xd9\xa6\xc7\xf0\xce\xb2\x40\xdf\xfe\xcb\xf0\xfc\xb2\x58\xce\xf1\xd8\x36\xd5\x1f\x44\x32\xb9\x1b\x28\xba\x0e\x11\x83\xb7\xc9\x8a\xf3\x92\xf4\xda\x95\x52\x9b\x41\x9e\xbb\x43\x5d\x64\x92\x78\x25\x6c\xf4\xa5\x37\xc3\x06\xc9\xf8\xee\x69\x41\x59\xf7\x34\x6a\x9b\x4e\x3c\xf9\xd7\xc9\xe6\xda\x7d\x48\x05\x78\x3f\x2c\x44\x75\x46\x95\x9f\x69\x41\x12\x5e\x1c\x34\x51\x25\x95\xcd\x82\x17\x87\xa7\xa1\x3c\xe9\x51\xe7\x57\x1b\x55\x6d\x9a\xcd\xd2\x68\x58\x40\xae\x94\x24\x7b\x3a\x4e\xa1\xdf\x0f\x2b\x46\xbe\x56\x96\x38\xa3\x6b\x2c\xc8\x65\x8b\x66\xcc\xf6\x12\x06\x33\x06\x6c\x88\xca\x6b\xe9\xed\xb0\x2e\x5d\x9c\xc0\x89\xec\xf6\x34\xdf\x08\xc1\x33\x0d\x45\x75\xaa\x0d\xea\x98\xd5\x2b\x88\x35\xde\x5b\x32\xcb\x20\x99\x2e\x70\xa5\xb4\xcc\x19\x3e\x4c\x01\xcd\x18\xcd\x74\x2e\xf0\x32\xcb\xec\x89\x15\xa9\x54\x53\x5c\xcd\x5f\x03\x7b\x75\xee\xd3\x15\xdf\x6a\xe3\x71\x65\x72\x2a\xfc\x0f\x43\x2d\x2d\xe2\xa9\x22\xbf\x17\x65\x1d\x99\xe3\x2e\xbc\xe0\x2c\x4d\xe9\x89\x98\x35\x98\xf2\xf8\xc0\xea\x8e\x87\x1d\x64\xbe\xad\x28\x7c\xa2\xf9\x95\xb8\xd7\x93\x61\x9c\x79\x7e\x07\xf6\x80\xb6\x97\xb6\x3d\xee\xeb\x6c\x3e\x7f\xc4\x93\xbe\x9d\x93\x25\xd5\xe9\xf5\xe4\x5d\x3b\xfd\x76\x87\x25\x8b\x3d\x52\x18\xc6\x73\x45\xd1\x53\xb9\x5d\x9a\x5d\x02\x11\x3c\xd7\xb5\xcd\x0b\x82\x9f\x65\xa3\x66\x3a\x67\x86\x65\xcd\x19\x4f\x9e\xfb\xbd\x66\x4f\xf8\x6f\x72\x90\xeb\x4b\x01\x8d\x73\xee\x32\x0b\xba\xc6\x4b\xd2\xef\x6c\x6e\xa6\x6c\xa0\xa6\xff\x33\x18\x7b\xa3\x6f\xd9\x5e\x99\x6a\x97\xdb\x06\x04\x97\xc4\xa2\x99\xc5\x37\x3a\x07\x3a\xcc\x1d\xb7\x34\x3b\xbe\xc2\xc8\x9e\xb0\x7c\xdc\x63\x1a\x6a\x82\xa7\x13\xef\x75\xaa\x47\x0a\xd1\x6b\x30\x57\x4f\xba\x4d\x34\xbe\xb7\xaa\x84\xbe\x37\x78\xb4\x78\x14\x0e\x53\x23\xcc\x48\xd1\xef\xd1\xbb\x63\x04\xb8\x65\x59\xf3\xb2\x7e\xbe\xe6\xf0\x6f\xcc\x34\x21\xe3\x3a\x1d\x97\x71\xbb\x19\xd7\x1b\xb6\x34\xd3\x64\x45\xe0\xa8\x36\x7d\xdb\xd5\xfd\xbe\x03\x9c\x0a\xc7\xd5\x81\x6c\x49\xb1\x60\x52\xc8\x2b\x9a\xa6\x24\x1b\x18\xf5\x0a\x22\xd7\x7c\x4f\x34\x2f\x7b\x7d\x50\x8f\xa7\x6f\x38\xd5\x03\x32\x2c\xcd\xb9\x69\x51\xed\x69\x07\x53\x81\xb2\x67\x17\xe0\x56\x8f\x11\xdc\xcc\xc9\x61\x96\x6e\xc3\xe8\x76\xcc\xbd\x96\xfe\xe2\x44\x06\x9a\x40\xe5\x3e\x9e\x68\x72\x25\x02\xbd\x5e\xfa\x1d\xa3\x9e\xbe\x1e\xb8\x9f\xb4\x5e\xec\xdd\xcf\x79\x7a\x38\x7d\x45\x70\xda\xff\x3e\xa5\x5b\x90\x30\x5c\x96\x33\x63\x7d\xf8\xfc\x68\x7c\xf8\x2f\xbe\x29\xc0\xe7\xc7\x29\xb8\x2f\x73\x9c\x01\x9a\x36\x0d\xc8\x09\xa1\x0d\x6d\x88\xee\x27\xb2\xe5\xc3\xfd\x24\xa5\xdb\xf3\x77\x12\x2d\x74\x27\x5b\x1f\xc6\x55\xf0\xcb\x6d\x44\xa3\xe3\xdd\x46\xbb\x47\xfd\x4e\xd2\x00\x29\x16\xd8\x92\x2b\xa1\x99\x31\xc7\x25\x01\xc7\x06\x49\x7c\xf3\xd0\x81\xec\x1c\x61\xf5\xa6\xec\x12\x9f\x34\x80\x0a\x59\x05\xf1\xa4\x2a\x3a\x67\x74\x0b\x5a\xb5\x53\x70\x82\xb7\xaa\xd1\x22\xd6\xd6\xcb\xc1\x24\x9a\xf3\x0d\x40\xdd\xa4\xed\xbf\x0c\x43\xde\x51\xa7\x17\xe0\xe9\x8a\xfd\x9a\xf0\x2e\x16\xc9\x3a\x5a\x7f\x6e\x00\x5a\x1a\x39\xba\xe8\x3d\xfa\x20\x23\x71\xad\x99\x37\x72\x4e\x1c\x72\x32\x33\x2a\xd3\xad\xc5\xa1\xd0\x1b\x0d\xad\x27\x4b\x39\x1d\x9d\x0f\xaa\xcf\x9b\xdb\x19\xab\xe5\xe8\x48\xf2\x71\x74\x85\x8f\xad\xb5\xa0\x56\xc5\x15\x53\xbe\x92\x2c\x05\x82\x4f\x41\xcd\xa4\xba\x51\xd7\x45\x61\x54\xcc\x38\x2e\xe3\xb4\xf8\x27\x15\x48\x9f\x29\x48\x44\x2f\x5e\x57\x87\xa9\x1a\x7a\xbb\x6c\x26\xd7\x72\xa7\x06\xd8\xaf\x59\x56\xce\x8c\x95\x10\xf9\x74\x32\xd9\xed\x76\x70\xe7\x42\x5e\x2c\x27\x8e\x6d\xdb\x93\x72\xbb\xac\x41\xa6\x7b\x46\xb3\xe7\x2e\x40\x14\xc7\xf1\x44\xb5\x1a\xcd\x5b\xa4\x99\x81\x20\xaa\x84\xfe\x80\x73\xfc\x84\x0c\xb0\x9f\x19\x76\xbe\x37\xc0\xa1\xbe\x6f\x29\xd9\xfd\x8d\xcb\x5a\x60\x03\x27\x82\x4e\xe0\xd7\x37\x03\x28\xc7\x3b\x33\x88\x3a\x53\x60\xb5\x96\xa0\x19\xd9\x81\x0b\xf8\xf7\x8a\xc2\x69\x99\xe3\x84\x48\x63\x25\x25\x29\xb6\xc4\xa8\x62\xc2\xcc\xf0\x91\x23\xc7\xab\x02\x40\xf3\xd8\xc3\x29\xc5\xad\xe5\x15\x80\x23\x60\x8e\xc5\x0a\xa4\x33\xe3\x57\xe4\x41\xe4\xba\x66\x45\x52\x62\x85\xd0\x0e\x90\x69\x5b\xc8\x81\x91\xed\x5b\x3e\x0c\xfd\xa6\xac\x6e\x71\x62\x2b\x18\xd3\x87\xa1\xe7\x55\x75\xa1\xd9\x86\x08\x13\x1b\x7a\x41\xac\x76\x58\x63\xcf\x35\x6d\x68\x3b\xa1\x89\xa0\x87\x3c\x59\x8e\x00\x00\x5b\xcb\x81\x12\xce\xb2\xa1\x13\x04\xa6\x0d\x51\xe0\x59\x36\xf4\xed\xc8\xb4\xa1\x67\x07\x96\x0d\x03\x84\x12\x1b\x3a\xbe\x63\xd9\xd0\x8e\x65\xbd\xef\x22\x59\x56\x18\x43\x47\xfe\x22\x2f\x62\x1e\xf4\xdd\xd0\xf4\xa0\xef\x85\x0a\x5e\x42\xb6\x7f\x83\xb0\x22\xc4\x75\x64\xea\x62\x49\x70\x5f\x82\xfb\x61\x62\xd9\x10\xc5\x0a\x4f\x14\x59\x36\xf4\x42\x59\x76\x3c\x39\x7a\xe8\xf8\x0a\xbf\x2b\x81\x1c\x4f\x12\x81\x6c\x49\x62\x45\x9c\xeb\xbd\x94\x03\x3b\xfe\x47\x08\xbd\x50\xa6\x3e\x96\x9a\xb9\xa4\x32\x92\x4d\xb1\x27\x29\x46\x8e\x6f\xa9\xd9\x57\xe5\xc4\xf2\xaa\xa1\xac\x08\x22\xe4\x9a\x2e\x0c\xdc\xb8\x2e\xcb\x5f\x94\xd8\xa6\x84\x40\xb2\xc5\x43\xe6\x4b\x4b\xfd\x5b\x2a\x28\x4b\xb6\xd6\x3d\xaa\xde\x92\x00\xc9\x51\x37\x50\xf3\x88\x7d\x49\x9c\x64\x6e\x10\x38\xaa\xb8\x72\xa1\x1b\xc4\x89\x84\xf0\x15\x53\x82\xc0\x51\x90\xe1\xb1\x1c\x04\x0f\x4e\x00\x63\x37\x34\x1d\x07\xfa\xc8\x37\x1d\x04\x51\x14\xd7\xda\x61\x9e\xe8\xca\x37\x03\x2c\x28\x63\x33\xe3\xed\x2f\xea\x32\x26\x43\x75\x6f\xb0\x92\x4e\xae\x41\xf6\x43\xdc\x4b\x37\xa0\x6b\xbf\x25\xaa\xf6\xc4\x58\xb5\x48\x7b\x65\x8c\x56\x08\xd4\x16\x4d\x6f\x3a\x72\x84\x7a\x52\x5e\x8d\x67\x09\xa3\xc9\xf3\xcc\x28\x05\x2e\xc4\x17\x8e\xd3\xf1\x9d\x01\x04\x15\xd2\xf5\x7c\x95\x75\x80\x17\x40\xa6\x4d\x34\xdb\x90\xa1\xbe\xf5\x64\xc1\xfb\xef\xe2\x5d\x5d\x07\x22\xdf\x6d\xee\x43\xfc\xeb\x69\x8f\x1f\xe2\x61\x15\xfd\x8f\x0c\x6b\x53\x94\x13\x70\xe5\x67\x6b\xba\xa5\xb9\x58\xc5\x86\x91\x29\xd9\x92\x8c\xa7\xe9\xfb\x84\xd1\xfc\xb4\xc6\x50\x4e\xd9\xb1\x5d\x18\xc6\xc8\x8c\x63\x18\x38\xd1\x17\x2f\x86\xae\x1d\x9a\x0e\x74\x62\x4f\xfa\x0f\x3f\x08\x2d\x07\x86\x28\xb6\x90\x0d\x1d\x37\xb2\x1c\xe9\x47\x2d\xe4\x41\xdf\x41\xd5\x83\x72\x47\x28\x84\xc8\x75\xa4\x37\x0f\xa1\xed\x07\x26\x72\xa1\xe3\x84\xc7\xa7\x00\xfa\x61\xb4\x45\x71\x04\x63\x2f\xb1\x4d\x07\x46\xae\x2b\x9d\x57\xe8\x57\x6d\xb1\xd9\x86\x8c\x13\x0f\x3a\x91\x6b\xda\x66\x0c\x63\x5f\xfa\x47\xcf\x47\x66\x6b\x4c\xe9\x02\x19\xf2\x3d\xe8\x45\xae\x15\x87\xd0\x75\xdd\x04\x39\x30\x88\xac\x10\xfa\x9e\x6f\x22\x1b\x7a\x51\x6c\xa1\x00\x7a\x5e\x7c\xfa\xf4\xd5\x91\xf7\x10\x99\xc8\x0e\x21\x0a\x1d\xf3\x94\x01\x37\xbb\x9a\x21\x7e\x41\x97\xeb\x5c\x4b\xe3\x55\x12\x54\xef\xf0\x9d\x58\x23\xcf\xcf\x8c\xf1\x11\x6f\xca\xeb\x06\xf8\xef\x6e\x81\x41\x18\x37\xf7\x81\x16\xd8\xea\xf1\x03\x2d\xf0\x1a\x73\x8f\xf0\xaf\x33\xc1\xc8\x86\xbe\xcc\x35\x3e\xb9\x3e\x0c\xe3\x30\xb1\x62\x18\x45\x7e\x65\x4b\x51\x1c\x99\x11\xb4\x91\xd7\x3c\x54\xb7\x2d\x8a\x03\x18\x45\x55\x24\x36\x2b\x78\x09\xe6\x9a\x27\x60\xf5\x6d\xe5\x79\x30\xf4\x82\xa4\xc6\x5b\xd7\x5a\xed\x0e\x35\xfa\x7f\x54\xb7\x87\x38\x82\x9e\x57\x0d\x6c\xc6\x36\xf4\x1c\x99\xdb\x34\x74\x7e\x03\xbf\x56\xc3\x3b\xa6\x0d\x00\x58\x59\x35\x7a\x45\x77\xd0\xd0\x1d\xb7\xe9\x8e\xcf\xe8\xee\x21\x3a\x3e\x25\x5a\xce\x70\x38\xdd\x0e\xf2\x60\x18\xa1\x9a\x72\xc7\x0e\x60\xa8\xd2\xb2\x23\xbd\x3f\xc4\xbe\xfb\xcd\xbb\xc7\xc0\xab\x80\xdb\xec\xd3\xb7\x4c\x5c\xd5\x9d\xd9\xf8\x03\xce\x12\xc2\xc0\x26\x97\x8b\x99\xff\xd7\xc1\x16\x39\x30\x8e\x9c\xe6\x3e\xc4\xd4\x4f\x7b\xfc\x38\x53\x7f\x60\xfc\x87\x9a\x3a\x72\x11\x8c\x6c\xcf\x44\x76\x00\xbd\x18\xb1\xd0\x87\xb1\x1b\x58\xd5\x2d\x09\x60\x1c\x5b\xf2\xc7\x54\x25\x14\x41\x57\xae\x3e\x2c\xc7\x87\x2e\x72\x54\x9c\x3d\x82\x54\xad\x4e\x55\xae\x00\x4c\x9b\x55\x98\x42\xb3\xba\x7d\x71\x6d\xe8\xfb\x9e\xe9\xcb\x85\xc5\xb5\xbe\xaa\x3d\xaa\x87\xae\x8a\x0d\x01\xe6\x91\x00\xd6\xc6\x1f\x7c\x51\x88\x4d\x14\x39\xd2\x43\x5c\x47\x90\x1c\xe7\x56\xb5\x38\x55\xf9\x48\x7d\x85\xbc\x9e\xc3\xc9\x50\x6a\xcd\xf3\x82\xbe\xb3\x7b\x27\xfb\x9c\x23\xfb\xbe\x9c\xf1\xfe\x5f\xe0\x09\x4e\xea\x4e\x36\x2c\x97\x95\xf9\xc8\x42\x9d\xe0\x57\x50\x37\xe0\x7b\x63\x59\xe0\x9e\x66\xf9\xa6\xda\x3c\x59\x50\x46\x4a\xa3\xde\x62\x92\x0f\x06\xa8\x8e\x55\x1c\x77\xae\xc0\x4b\x69\xbd\x61\x82\xe6\x8c\x4c\x3e\x00\xcb\xba\x38\xed\x9d\x14\x34\xef\xda\x63\x49\x79\xb2\x59\x93\x4c\xc0\x25\x11\x1f\xab\xef\x04\xfe\x76\xf8\x9c\x8e\xeb\x4d\xb2\xd1\x1d\xc4\x69\xfa\x71\x4b\x32\xf1\x85\x96\x82\x64\xa4\x18\x1b\xca\xbf\x19\x26\xa8\x40\x7e\xd9\x64\x49\xd7\xb1\x77\x1d\xe6\xf6\x4e\x4e\x1f\xf6\x0a\xec\x81\x67\x19\x49\x04\x49\x3f\x3f\x96\x77\x97\x83\x4c\x26\xfa\x19\x1c\x17\x41\x5d\x93\x18\xa9\x61\x46\x26\x50\xcb\xa2\x0e\xcc\x97\x35\xcd\xfe\xe8\x38\xb2\x2f\xe0\x2f\xa1\x77\x34\x4b\xf9\x0e\x92\xbd\x20\x45\x86\x19\xa4\xd9\x96\x3f\x93\xf1\x68\x7d\xf8\xfc\x38\xba\xeb\x8a\x28\x75\x0f\xf5\xea\xf5\x67\x2c\x30\x98\x81\xdf\xa5\x87\x9a\x02\x23\xe3\x19\x31\xbe\x77\x30\x79\x8b\x0b\xc0\x70\x29\x9e\x16\x34\x03\x33\xd0\x75\x40\xf2\xb2\x66\xb1\xc9\xd4\x9e\x64\x07\x8b\xc7\x77\xda\x37\x0f\xdd\xd3\x59\x12\xd1\xee\x3f\xba\xeb\x1e\xb2\xf3\x90\x5c\x8b\x8e\xb4\xc0\x3b\x39\x3c\xcd\x4b\x1d\x05\x8c\x08\x50\x6d\x15\xf2\x02\xcc\xf4\x62\x3f\xee\x38\x8e\x3a\xa4\x2a\xaf\x06\x09\xa4\x59\x46\x0a\x75\xc0\x7d\x06\x0c\x43\x3f\x6a\x46\x76\x1f\x99\xe6\x85\x0b\xcd\x4b\xb8\xe0\xc5\x47\x9c\xac\xc6\xcd\x7c\xc6\xf5\x07\x37\xba\x99\xc8\x4b\xe1\x6c\x4f\x23\x29\x08\x16\xa4\x9e\xc9\x78\xc4\x73\x89\x49\x37\x85\x23\x06\xb8\xc5\x6c\x43\xc0\xac\xf9\xc6\xe7\x1a\xb8\x9a\xf2\x6f\x64\x2f\x5e\xba\xc0\x32\x67\x54\x8c\x47\xd3\xd1\xdd\x7f\xdb\xff\xa3\x47\x70\x64\x1b\xce\x73\x92\xa5\x0f\x2b\xca\xd2\xb1\xc2\xaa\x21\xf2\x7b\x97\x57\xe8\x57\x84\xd6\x1e\x85\xf6\x4d\x76\x56\x72\x46\x20\xe3\xcb\xb1\xf1\x89\x30\xc6\x0d\xcd\xf0\x74\x31\x3e\xb7\x28\x28\xcd\x69\x36\xab\xcc\xa9\x4f\x3a\x5a\xdf\x55\xed\xdf\xdc\xbd\xa8\xce\xcc\xa8\xb6\xee\x5f\x1c\xf1\x9b\x37\x6f\x34\xba\xf4\x9d\x30\xed\xf1\xcf\x5b\x47\xd5\x0c\xd1\x8b\xe6\x65\x57\xe8\x0e\xaa\xac\x07\xd6\x6f\x82\xc1\x0c\x8c\x24\x4f\x46\xaf\x40\x7a\x5c\xdb\x76\xe0\x6c\x9f\xf6\x79\x0d\xee\x97\xac\xfa\x75\xc8\x3b\x5e\x77\x0e\x3a\x9a\xd5\xd2\xc7\x66\x95\xae\x3b\x7f\xf3\x1a\xb6\xf4\xb0\xfa\x75\xb2\x3b\x63\xc5\xad\x56\xd7\x5a\xa8\xfc\xcb\xa7\xd9\x27\xf1\x1f\xcd\xb7\xdb\xb8\x56\x32\x42\x72\x30\x16\x74\x4d\x64\xb2\x52\x72\xb6\x25\x77\xba\x93\xb3\xc7\xd8\x00\xc6\xd7\x40\x81\xf2\xb5\xe2\x37\xba\x26\x7c\x23\x5a\x1d\xef\xc0\xef\x9a\x5c\xb2\xb9\x6a\xd4\x63\xdd\x57\x88\x6a\x52\xa6\xa4\x58\xeb\xb2\x8f\xe4\x75\xb0\x43\x9a\x4a\x0f\x43\x8e\xf9\xd1\x16\x33\x9d\x22\xc9\x7c\xa5\x4a\x55\x5c\x18\xbc\x03\x5b\xcc\xb4\xce\x7b\x41\xb3\x0f\x28\xb2\x5f\xe5\xa6\xdb\x6f\xda\x1b\xb9\xbf\x7c\x73\x39\x03\x46\xfd\x25\x25\x8a\xd4\xb7\x94\xaf\x71\xa6\x27\x2f\xdd\xfb\xc6\x30\x7e\x5a\xd0\xec\x27\xe3\xb5\xe3\x34\x27\x10\x9a\x21\xe4\xaa\x74\x66\xa8\x2f\x50\xf1\x46\x70\xf3\xf4\xe7\xce\xe8\x51\x11\x7d\xcb\x64\x02\xe6\x9b\x25\xd8\x51\xb1\x6a\x1d\xfd\x2b\x7b\x3b\xd0\xc5\xb8\xc9\x3c\xef\x67\x57\x04\x35\x99\xa8\x9b\x32\x99\xb1\x6b\xdb\xe6\x51\x6b\xb4\x2e\xa7\xd5\xad\x33\x91\x68\xc1\x68\x3e\x87\x96\x57\x2b\x37\x5e\xd0\xae\x43\x58\xcd\xf5\x4f\x8e\xd8\x3d\x52\xb3\xf3\xbd\x59\x7d\x30\x5c\xfd\xaa\x8f\xc1\xff\x80\x06\x5e\x55\xf2\x3f\xa8\x80\x83\x15\xfd\x9a\x29\x0d\x92\x85\x46\x96\xda\x6c\xff\xfc\xd0\xca\xe8\xee\x24\xad\xdf\x62\xf6\x93\xf1\x97\x0e\xa2\xae\xf8\x76\x22\x7e\x3d\x7c\x7e\x1c\xd3\xfc\xe6\x88\xa8\x8e\x3b\x9d\x12\x41\xf3\x57\x8c\xff\x85\x2f\xc7\x8c\x2f\x6f\x1e\x9f\xf1\xe5\xd9\xf0\x8c\x2f\xff\x68\x1e\xf4\xb2\xd2\xbf\x79\x81\xc8\xe5\x62\x81\x16\x23\x9d\x0d\xeb\xd2\x74\xc8\x48\xb6\x94\xd9\x7a\xaf\x63\xe9\xec\x2a\x75\x52\xa5\xf8\x37\xa9\x98\x0c\x4d\x75\xef\x6e\xb4\xaf\xa2\xff\xc3\x0c\xd9\x77\xbf\xd7\x78\x47\x10\xc2\xd1\x4f\xaa\xb5\xdc\xcc\x4b\x51\x8c\x5b\x90\xc0\x02\xe1\xdd\xad\xea\x7f\x79\x94\xe9\x54\xf6\x12\xff\xcd\xab\x30\x95\x33\xf5\x0a\x5b\x83\xf1\x6c\xd3\x69\x72\xb2\xeb\x74\x3f\xa9\x8f\x13\xde\x4f\xd4\x3f\x12\xf9\xbf\x00\x00\x00\xff\xff\xf9\x94\xc1\xea\x60\x44\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 17504, mode: os.FileMode(438), modTime: time.Unix(1527715767, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

