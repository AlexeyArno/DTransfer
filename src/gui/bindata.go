// Code generated by go-bindata.
// sources:
// data/index.html
// data/pause.svg
// data/play-button.svg
// data/play.svg
// data/rec.svg
// data/rounded-pause-button.svg
// DO NOT EDIT!

package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6f\x8f\xe2\x36\x1a\x7f\x7f\xd2\x7d\x07\x6f\x46\x15\xcc\x6e\x62\x92\x40\x08\xb0\x30\x52\x3b\xbb\xab\xad\x6e\x7b\xad\x6e\xab\xbe\x1d\x99\xc4\x80\x35\xc6\xce\x39\x0e\x30\x5d\xed\x77\x3f\xd9\x49\x20\x80\x1d\x98\x69\xef\xae\x2f\x36\xab\x4e\x42\x62\xff\xfc\xf8\xf9\xf3\x7b\x1e\x3b\xe9\xf4\x55\xca\x13\xf9\x94\x61\xb0\x92\x6b\x7a\xf7\xf7\xbf\x4d\xab\x33\x00\x00\x4c\x57\x18\xa5\xd5\x75\x7d\x4c\x73\xf9\x44\xf1\xc9\x4d\x75\xc0\xad\x40\x59\x86\x05\xf8\x72\xfe\x4c\x1d\x5b\x92\xca\xd5\x04\x04\xb1\x9f\xed\xde\x82\xde\x6b\xf0\x19\x4b\x20\x57\x18\xe4\xe4\x77\x0c\xf8\x42\x5f\x67\x82\x2f\x05\xce\x73\x30\x47\x02\xbc\xee\x99\x91\x56\x98\x2c\x57\xb2\x86\x32\xb7\xc9\x78\x4e\x24\xe1\x6c\x02\xd0\x3c\xe7\xb4\x90\x58\x8f\xf9\x9e\xa1\x39\xc5\x20\xa1\x24\xcb\x08\x5b\x5a\x87\x50\x0d\x26\x40\xe0\x44\x76\xfd\x6c\xe7\x82\x20\x6a\x9e\xe2\x28\xdb\xdd\x6a\xbc\x8f\x24\xc5\x60\x85\xe8\xe2\x59\x13\xf8\x6a\xbe\x7d\xa2\x93\xbc\xc6\xc4\x14\xaf\x31\x93\x39\x90\x2b\x24\xc1\x1a\x3d\x62\x50\x64\xd7\x8d\x06\x13\x22\x12\x8a\x2f\xd9\xa4\x6f\x57\xe4\x5e\xd9\x2d\x6d\xe6\x5c\xa4\x58\x4c\x40\xe0\x67\x3b\x90\x73\x4a\x52\x70\x33\x1a\xdd\xfb\x51\xdc\xda\xc1\x13\x28\x25\x45\x3e\x01\xe3\xfe\x73\xec\x78\x9d\xc5\x94\x8d\xf6\x06\xf3\x95\xbd\xcc\xfd\xa4\x40\xac\x1e\x42\x5f\x2f\xb8\x58\x03\xe0\xc3\x7e\xde\xd6\x43\xb5\x9a\x00\xc1\x25\x92\xb8\xeb\xa7\x78\x69\xc3\x3f\xb1\xf5\xb4\x67\x8a\x1f\x6b\x50\xcd\x79\xfa\x64\xb1\xdd\x1c\x25\x8f\x4b\xc1\x0b\x96\x4e\xc0\x4d\xf8\xa1\x1f\x0f\xbe\xb7\x88\x50\x59\xb9\xef\xdb\x2d\xb8\xe0\x4c\x7a\x0b\xb4\x26\xf4\x69\x02\xbe\x17\x04\x51\x17\x7c\xc4\x74\x83\x25\x49\x90\x0b\x72\xc4\x72\x2f\xc7\x82\x2c\xda\xfa\x2b\xa7\x9d\x80\x20\xb4\x8e\x22\xf1\x4e\x7a\x88\x92\x25\x9b\x80\x04\x33\x89\x85\xcd\xea\x28\x4d\x09\x5b\x7a\x92\x67\x4a\x6e\x2b\x60\xc2\x29\x17\x93\x1b\xec\xab\x7f\xb6\x36\x85\xc8\xb9\x98\xa4\x78\x81\x0a\x2a\x2d\x8d\xbc\x2d\x9e\x3f\x12\xe9\x49\x5e\x24\x2b\x2f\x41\x94\xf2\x42\x4e\x00\xe3\xac\xe4\x0d\xf2\xf3\x67\xf0\x19\x2d\x90\x20\xd6\xa0\xae\x21\x8a\x1c\x0b\x2f\xc7\x14\x27\x4d\x80\x4b\x9d\x1f\x15\xed\x5a\xfa\xfe\x83\xb3\x7f\x17\x58\x70\x01\x3e\xfe\xfa\xd3\x27\x3b\xc6\x9a\xff\x6e\x41\xf8\x40\x04\x5e\xf0\x9d\xb5\x6b\xd9\x3d\xb7\xf4\xfe\x51\x59\x8a\x61\x09\xde\xef\x32\xca\x05\x16\xbd\xf7\xe9\x12\xb7\x82\xa9\xc3\x0c\xf6\x4f\xce\xbc\x4c\xe0\x05\xd9\xe1\x14\x6c\xb0\xc8\x09\x67\xae\x32\x92\xc0\x4c\xd2\xa7\x76\x48\xd3\x91\x17\x59\xc6\x85\xc4\x29\x98\x3f\x81\xfb\x95\xe0\x6b\x0c\x10\x4b\xc1\xcf\x19\x16\xc8\x28\xa4\x81\x7e\xcf\xef\xdc\x24\x2b\xce\x73\x6c\x09\xbe\x05\xe5\x48\x4e\x84\xa2\xc6\x17\xe2\x43\xc5\x20\x16\xf4\x23\xf7\x0f\xcc\xee\x7f\xdd\x20\x75\x82\x78\x48\x38\x93\x88\x30\x2c\x2e\x64\x82\xc8\x1e\x6c\x6b\x24\x96\x44\x11\x71\x21\xf9\xa5\x64\xd1\x02\xd3\x7b\x7d\x44\x5d\x02\xa7\x6f\x6d\x56\xba\xca\x4e\xfb\x29\x66\x9c\x28\x47\x6d\xb5\x18\xd0\x26\xbb\x4c\x62\x61\x74\x89\x73\x16\xfa\x68\x43\xda\x56\xca\x88\x7d\x1b\x35\x1d\x92\x9b\xc0\x14\x49\xb2\xb1\x25\x37\xe5\x08\x43\xbb\x4a\x4b\xe3\x05\xa1\xbd\xc5\xd5\xcc\xab\xf5\x33\x09\xcc\xd3\xbf\xce\xe7\x18\xdf\x3e\x2c\x08\x35\x87\x4e\xa5\xbd\x64\xa0\xfe\x19\x65\xa8\x0c\x45\xf1\x42\xbe\x35\xc0\x5f\x1f\x5c\x0f\xf3\x42\x4a\xce\xf2\x6b\x82\xac\x25\xc7\xbc\x38\x18\xaa\x90\x0a\xab\xb4\x7b\xd5\x54\x60\xc9\x3a\xec\x21\x25\xaa\x94\xe1\xc2\x96\xfd\x9b\x5a\x7a\xa9\x92\x10\x23\x6b\x24\xf1\xf9\x13\xcb\x98\xcd\x52\x09\x51\x0a\x7c\x18\xd8\x6a\xa4\x7d\x3e\xbd\xae\x8b\x49\x13\x28\x51\xdd\x2a\x23\x5a\x24\xaa\x72\x3b\xa8\x42\xbf\xd5\x10\x6b\xb4\xf3\x14\x0b\x62\x66\x8b\xff\x94\xe4\x19\x45\x4f\x13\x40\x18\x25\xcc\x16\x8b\xe7\x69\xad\x25\xe4\x52\x9c\x70\x81\xca\xf9\x5b\xda\x5e\x9c\xfb\x64\xc5\x37\x56\x5a\x2b\xe3\x49\xb3\xe8\x75\xd0\x3a\x32\x4a\xf1\x5b\x21\x2b\x82\x1b\x9b\x70\xc1\x3e\x00\xca\xe8\xb1\x10\x8f\x61\xf8\x9b\x72\xe4\x07\x92\x5d\xc8\x43\x2d\x5c\x76\xb2\x78\x08\xa1\x9d\xab\x8f\x6a\xe4\x16\xce\xd9\x4f\x47\xc5\xd3\x1f\x4b\xb9\x37\x73\xbc\x24\x36\x7f\xed\xbd\x06\x3c\x43\x09\x91\x4f\x13\xb5\xc2\x30\x27\x3e\x70\x9d\x76\xcd\xc3\x9b\x74\xae\x25\x7a\xc8\x37\x4b\xd7\x64\x10\xc9\x33\xdb\xb3\xb9\xc0\xe8\x51\x3d\xb4\x4c\xe7\x24\x60\xbc\x39\xe5\xc9\x63\x3b\x1b\x5e\xae\x2f\x2c\x8c\x6a\x74\xa6\x3f\x43\xf6\x67\x86\xe5\x06\xb7\x53\xd2\x39\xe3\x85\x39\xc0\x28\xc7\x1e\x61\x1e\x2f\x6c\xdc\x73\x1d\x93\x35\x9c\xc7\xb6\xb4\xae\x4b\xb0\xe8\xea\x14\x7e\x3c\xad\x56\xb6\xd9\x8f\x1f\xbc\x04\xb9\xfc\x65\x5b\xce\xf2\x9d\x97\xaf\x50\xca\xb7\xad\xac\xda\xd0\xc0\xf8\x3a\x27\x41\x14\x8b\x76\xaa\x33\x93\x27\x78\x4e\xd9\x74\x28\x7c\x2f\xb8\xf7\x73\x6b\xfa\xe3\xfd\x82\x69\xaf\xb1\x23\x37\x9d\xf3\xf4\xe9\x78\xcf\xe0\xb4\xca\x98\xa6\x64\x03\x12\x8a\xf2\x7c\xe6\x9c\x2f\x05\x1c\xc3\x86\xc3\x69\xaf\x6a\x53\xcf\x01\x29\x92\xc8\x53\x15\xc3\xcc\x99\xa3\x1c\x83\xfd\x03\x92\x1e\x5a\x59\x00\x4d\xc0\xe5\xc6\xd4\x39\xae\x62\xe0\x12\xb4\x6c\xf1\xa0\x6f\xdc\x4d\x7b\x29\xd9\xfc\x09\xf0\xba\xbe\x3d\xc2\x2f\xef\xb4\x0f\xd0\xfe\x50\x0d\xab\x00\x4f\x57\x22\xad\xea\xf0\xbf\x7b\xc9\x58\x06\xc6\x3f\xb1\xb8\xa1\x77\x53\x2f\xcd\xc2\xf8\x1a\xfb\x9f\xd5\xa3\xad\x93\x7a\x57\xb7\x9a\x80\x69\x9e\x21\xa6\xd4\xd2\x39\x83\xe8\xdc\xa9\x00\x9f\xf6\x54\x0b\x9b\x08\x2d\x4a\xd0\xe2\xc9\xa7\x0c\xcf\x9c\x72\x22\x95\x39\xf5\x30\x4e\x2d\xf8\x51\x09\x75\xc9\x31\xef\x75\xdf\x57\xcf\x97\xc5\x14\xb0\x87\xd6\x86\xa7\x07\xd5\x76\x94\x29\x3a\x2d\x82\x9d\x99\xad\xac\x9d\x2e\xcd\x45\x77\xd5\xaa\xfd\x17\x4e\x30\xd9\x60\x01\x7e\xfc\x65\x02\x2a\x75\x5b\xe5\x3e\x87\xd0\xa3\x69\xd5\xee\x8b\xb6\x6b\xc6\x56\x7d\x79\xa6\x94\x0f\x36\x88\x16\x78\xe6\x04\x61\x0c\x7d\xe8\xc3\xc0\xb9\xdb\x5f\x4e\x7b\x65\x9b\xbb\x2b\xa5\xe9\x95\x32\xb4\xa9\xcb\x60\x26\x43\x1c\xa8\xf9\xe8\x94\x60\x0e\x79\x6b\xfc\xe8\x8e\xba\x92\x32\x29\x61\x0f\xbd\xaf\xb5\x1c\xc0\x59\x42\x49\xf2\x38\x73\x72\x89\x84\xfc\xc4\x51\xda\xbd\x75\x80\x24\x92\xe2\x99\xf3\x59\xdd\x03\x5c\x00\xc5\xc6\x84\x15\xb8\x45\xb5\xd3\x7c\xb3\x6c\xba\xf5\x3e\xa3\x3a\xf5\x06\xda\xcc\x09\x60\x50\x86\xc1\x3d\xca\xd0\x43\xe0\x80\xdd\x9a\xb2\x7c\xe6\xac\xa4\xcc\x26\xbd\xde\x76\xbb\x85\xdb\x3e\xe4\x62\xd9\x0b\x7d\xdf\xef\x69\x01\x75\x93\xc9\x8e\x12\xf6\x68\x6a\x18\x8c\xc7\xe3\x9e\x7e\xea\x80\xdd\xcc\xf1\xb3\x9d\x03\x9e\xca\xb3\xdd\x0a\x1b\x82\xb7\x3f\x70\xd5\x1c\xf8\x20\x0a\x42\xf5\x9f\x03\x74\x0e\x9b\x39\x58\xbf\x7d\xf1\x1a\x55\x39\xc3\x5b\xd0\x68\xf9\x56\x0b\x35\xc9\x33\x94\x60\xc5\xa7\x38\xc7\x62\x63\x53\xcd\x34\x43\x72\x55\x43\x2f\x08\xa5\x93\x9b\xfb\x0f\xef\x46\xef\xee\xdf\x3a\x20\x9d\x39\x3f\x05\x41\x0c\xfb\xfd\xbe\xeb\xaf\xc2\x58\x5f\xdd\x0f\xa2\x31\x1c\x0c\x47\xae\xef\x46\x41\xe8\x46\x21\x8c\xfa\xa1\xbe\xac\x9a\x6e\xea\x86\xea\x5e\xdd\xb8\x3e\xab\x7b\xfd\xf1\x00\x0e\x87\xb1\xba\xb6\xaa\xe0\x63\x05\x76\xdf\xc0\xf7\xdd\xc3\xd0\x15\xc6\x6f\x75\x33\x7f\x2f\x48\x79\xf2\xdd\xbd\xe0\xbf\x3b\xbd\xab\xa7\x3e\xf4\xe3\x77\xa3\x1f\xaa\xa9\xf7\xa3\x18\xc6\xa3\xc0\x0d\x07\x31\xf4\x83\x31\xf5\x82\xc1\x58\x41\x7a\xe3\x61\xe2\x0d\xe0\x38\x0a\xbc\x3e\x0c\xc6\x7d\x2f\x08\x60\x14\x85\x5e\x00\xe3\xe1\xc8\x0b\x06\x30\x1e\x44\x6e\x1f\x06\xa3\xbe\x75\x7a\x89\x17\xc0\x20\x88\xdc\x00\xc6\xe1\x48\x75\xf4\x87\x6e\x1f\xc6\x03\x0d\xe2\xf7\xdd\x08\xc6\xe3\xf1\x26\x18\x87\x89\xe7\x43\x3f\x70\x23\x38\x1a\x07\xee\x00\xc6\xd1\xc8\x0d\x7c\x38\x8c\x07\xfa\x34\x18\xeb\xd3\x68\x90\x84\xd0\x8f\x62\xd7\x87\xbe\xdf\x77\x07\xd0\x8f\x3d\x1f\x46\xa3\x51\x89\x53\x62\xd2\x83\xf4\x76\xb1\x06\x70\x3c\x54\x93\x8a\x47\xee\x10\x0e\xfc\xc8\x1b\xc3\x38\x56\xa2\x85\x61\xac\x67\xd6\x1f\xde\xf7\x87\xbe\x6e\x10\x0e\x46\x70\x1c\xb9\xfd\x68\x0c\xfd\x38\xd6\x5a\x1a\x0d\xc6\xee\x89\xd6\x3e\x9d\xfc\xb6\x5a\x03\x94\x04\xb5\x59\x9a\x88\xc1\x92\x3c\xf6\x84\x51\xaf\x61\x8e\xf8\x82\x67\x27\x74\xf1\x0b\x2a\xf2\x36\x8a\xf8\xc6\x11\xb6\x62\xe1\xaf\x49\x12\xff\x13\x96\x00\x53\x93\x47\xb6\x68\xe6\x88\x43\x82\xa1\xef\x56\x81\xb7\x1a\x0e\x92\x32\x8e\x7d\x1d\xb5\xc3\x58\x05\x74\x3c\xac\x7f\x94\x27\x1d\xf4\x7e\x19\xf0\x5e\xf3\xb9\x77\xd4\x6c\xe5\x0d\x07\xed\x09\x3f\xf1\xaa\xc1\xaa\x8e\x25\x98\x77\x04\xf6\x5b\x30\xf4\xef\x2b\xf1\xdc\x20\x1a\xc0\xc0\x1f\x1f\xce\xf5\xfd\xc3\x14\x5a\x83\xf7\xa2\x2e\xc2\xd1\xe8\xaf\xae\x8b\xca\x2b\xf7\x3a\x08\x47\xe1\x91\x2e\x1a\x53\x68\x71\x98\x9e\xcd\x63\x2e\xf1\x9b\x85\xe1\xca\x9a\xa8\xde\x8a\x69\x70\x9c\xbe\x77\x42\x72\xf7\x88\x25\x98\x82\x22\xa3\x1c\xa5\xdf\xc8\xee\x5b\x41\xf4\x8c\x82\xa8\xfa\xce\xc5\x1c\xc2\xc9\x6e\xe6\x84\xd1\xd0\x01\xc9\x53\x75\x21\x66\x4e\xe0\x0f\xd5\xb0\xed\xbc\xf0\xcc\xac\x5e\x1f\xd7\xf5\x98\xbe\xf2\x3c\x30\x25\x2c\x2b\xca\x65\xd6\x82\x50\x9c\x3b\xd5\xd2\x56\xfd\x70\x40\xf9\x1a\x65\xbf\x72\x06\x87\xab\x75\x41\x25\xc9\x28\xee\xdd\x01\xcf\x3b\xfb\x9c\x24\x11\x24\x33\x2d\x96\x52\x9e\x14\x6b\xcc\x24\x5c\x62\xf9\xbe\xfc\xac\xe8\x87\xa7\x1f\xd3\x6e\xb5\x48\xef\xdc\x42\x94\xa6\xef\x37\x98\xc9\x4f\x24\x97\x98\x61\xd1\x75\x74\xc4\x3a\x2e\x28\x9b\x7c\x28\x58\x62\xfa\xd6\xa5\xd7\xb3\x83\xef\x17\x45\x26\xfc\x8e\xc6\xef\xb8\x40\x2f\x93\x6e\xcf\x91\xb7\x84\xa5\x7c\x0b\xf5\xc6\xea\x3b\x24\x11\x98\x81\x2f\xca\xd3\x27\xc0\x09\xc2\xbe\xf3\xd5\x20\xcc\x06\x09\x40\x51\x2e\x1f\x16\x84\x81\x19\x30\xbd\x7f\x5d\x14\x4c\xef\x10\x80\xc6\xea\xcc\xba\x4b\xc8\x72\x4e\x31\xa4\x7c\xd9\x75\x3e\x62\x4a\xb9\x63\x10\x53\x1d\x64\xd1\x3d\x95\x16\x2a\x51\x67\x33\x87\x71\x86\x1d\xdb\x08\x6d\xa6\xa9\x56\xab\xb7\x90\x30\x86\xc5\xc7\x5f\x7f\xfa\x34\x73\xca\xfd\x8a\x83\x37\xbc\x7a\xf5\xca\x42\x41\x5f\x31\xb5\x7e\xc4\xf0\xdc\x51\x5b\x58\xce\x0a\x73\x58\x0f\xdf\x42\x1d\x9c\xb0\xda\x78\x07\x33\xd0\x51\x3a\xe9\xbc\x00\x74\x5f\x33\x1b\x30\x9b\xaf\x22\x5e\x82\x7d\x48\x56\x2f\x03\x37\xec\xe1\x1a\x6e\x35\xbc\xaf\xae\xf5\x6d\xef\x29\x5e\xa2\x84\x16\xc5\xbe\xcc\x52\x27\x13\x37\xce\xb1\x65\x96\x8d\x6c\xff\x7f\x9f\x66\x9b\x7d\xff\xdb\x7a\x33\x68\xed\xf4\x56\xab\x1e\x73\x8a\x71\x06\xba\x92\xac\xb1\x0b\x04\xce\x39\xdd\xe0\x5b\xdb\xeb\xfa\xee\xbe\x5b\xf7\x52\x53\x75\xe4\x58\xfe\x4a\xd6\x98\x17\xb2\xd1\xf1\x16\x7c\xb9\xb0\x3b\x57\x41\x77\x6d\xdf\x3f\xea\x69\xba\x4a\x62\x0b\x67\x7e\xbd\xdd\x8b\x67\x50\xd0\x05\x85\xd4\x5b\xee\xdd\x0d\xa2\x36\xd7\x52\xc9\xa0\xcc\x03\x7d\x38\x7c\x0d\x36\x88\x5a\xc9\x7b\x41\xd8\x5d\x30\xf2\x5f\x44\xd3\xcd\xd7\x15\xb5\x27\x1c\x3e\x28\x9d\x01\xa7\xfa\x58\x34\x18\xe9\xcf\x45\x5f\x42\xa6\x47\x6f\x2c\xda\xc6\x70\xde\x2c\x08\x7b\xe3\x5c\x18\xc7\xfe\xa4\xd7\x03\xf3\x62\x09\xb6\x44\xae\x1a\x2f\x34\x73\x7b\x07\xb2\xe8\xd6\xf9\x76\x3a\xbb\xa0\x41\x75\x68\x47\xee\xf6\x7d\xdf\xdd\xdb\xd2\x4a\x0d\x57\xa9\xa6\x7e\x03\x55\x6b\x25\xa1\x24\x9b\x39\xfa\x73\x60\x54\x48\xee\x1e\xff\xb9\x75\x2e\x78\xf5\xd7\x56\x77\xb6\x3f\x6a\x14\x1d\x0b\xc2\x5a\x30\xfe\xe4\x6c\xdd\x32\x7d\x3f\xdb\xb9\xe5\x67\xd0\xe5\x5f\xfd\xf1\xfa\x1f\xf0\xbe\x8b\x0e\x7e\x9d\xf3\xfd\x71\x27\xbf\x14\x46\x57\xd9\xc2\x62\x4b\x6b\x29\x7b\xfa\x8e\xaf\xd3\xa8\x90\xc0\x0c\x60\x55\xda\x42\x89\xc4\x12\x4b\xa8\x5f\x7f\xbc\x71\xbe\x33\xc8\xa8\xd3\xe5\xa5\x77\x79\xa0\xc9\x74\x87\xea\xdb\x1a\x28\x55\xe9\x89\x77\x12\x0b\x86\x28\x24\x6c\xc3\x1f\x71\xb7\xc3\x33\xcc\x52\x22\x3a\x36\x9f\xb6\x55\xad\x90\x62\xb6\x54\xc5\x6b\x6b\x38\x1b\xbb\x2a\x33\xe9\x8a\xf7\x59\x5a\x57\x4c\x5d\xf5\x36\xc3\xbe\x48\xfe\xbb\x59\xe0\xdf\x7e\xa9\x70\x3b\x10\xc2\xce\x1b\xfd\x34\x2f\xe6\xb9\x14\xdd\x46\x4b\xe0\x81\xf8\xf6\xb9\x1e\x71\xfe\x7a\xf3\xd8\x25\x14\xbe\xf9\x5d\x7f\x5b\xc1\xa4\x8a\x8a\x56\x63\x5f\xe5\x53\xd3\xde\xd1\x4a\x70\xda\xab\x3e\x19\x98\xf6\xf4\xff\xe5\xf3\x9f\x00\x00\x00\xff\xff\x0b\x38\x6f\xb6\xfd\x33\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 13309, mode: os.FileMode(438), modTime: time.Unix(1527422108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPauseSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\x4b\x8b\x9c\x5c\x10\x5d\xb7\xe0\x7f\xa8\xef\x7e\xab\x80\xf7\x5a\xd7\xb7\xce\x38\x43\xda\x4e\x26\xb3\x08\x04\x02\xbd\x0d\xb6\xde\xd8\x32\x8e\x8a\xda\xea\xe4\xd7\x87\xeb\xa3\x1f\x30\x90\xed\x2c\xa4\xca\xaa\x53\xa7\xce\xa1\xf4\xfe\x71\x7c\x2d\xa0\x17\x4d\x9b\x57\x65\x48\x38\x43\x02\xa2\x4c\xaa\x34\x2f\xb3\x90\xe4\x6d\x45\x3d\xcf\xf6\x29\x27\x8f\x0f\xaa\x72\xff\x1f\xa5\xf0\x24\x4a\xd1\xc4\x5d\xd5\x04\xf0\x39\xad\x0e\x02\x9e\x8b\xe2\xd4\x76\x53\x09\xb8\xcf\x90\xa1\x06\x3f\xf7\x4f\xf0\x65\xac\xab\xa6\x83\x1f\xc5\x29\xa3\xcf\x25\xb0\xa9\xb8\x9f\x37\x05\xe0\x30\x44\xd8\x9e\xf2\x22\x05\xfc\x04\x40\xa9\xe4\x6f\xfb\xec\x5a\x0b\x27\x90\xa7\x21\x89\xe2\x3a\xfe\xc5\x09\x8c\xaf\x45\xd9\x86\xe4\xd8\x75\x75\xa0\xeb\xc3\x30\xb0\xc1\x64\x55\x93\xe9\x06\x22\xea\x6d\x9f\x2d\x90\x60\x2c\xf2\xf2\xe5\x3d\x20\xf7\x7d\x5f\x9f\xba\x04\xc6\x90\x60\x3d\x12\x78\x9b\xa3\xaa\x6c\xa0\xcf\xc5\xb0\xad\x64\x03\x10\x6c\x6e\xc8\x87\x40\xdb\xbd\x15\x22\x24\xa2\x8c\x0f\x85\xa0\x87\x38\x79\xc9\x9a\xea\x54\xa6\x41\x29\x06\xb8\x42\xde\x4d\xeb\x83\xb6\x8e\x13\x11\x92\xba\x11\xad\x68\x7a\x41\xa4\xaf\x3a\xee\x8e\x2b\xcf\xef\xbc\x28\x82\xff\xa3\xaf\x3b\x6f\x17\xdd\x11\x48\x43\xf2\x9d\x73\x97\x99\xa6\xa9\xe1\xd1\x70\xa7\x2c\xb2\x6c\x9f\x59\x8e\xa7\xa1\x66\x73\x43\xb3\x0d\x66\x9b\xc6\x94\x2e\xd0\x7e\x05\xca\xda\x0a\x5e\xa3\xac\x99\xbe\xc5\x1c\xc7\x95\xb9\xaa\x6c\xbe\x2d\x63\xd1\x15\x13\x6a\x97\x25\x0b\x7a\xbf\xc2\xf0\xbc\x72\x0e\xa8\x9d\x25\xfe\x21\xba\x74\x94\x3d\xa8\xca\xe6\x1d\x5f\x0e\xba\x3b\x6f\xbb\xfa\x72\x50\xe3\x96\x2f\x07\x8f\x8e\x95\xd8\xcc\xf3\xb9\xe4\xc2\x49\x9a\xc5\x5c\xd7\x59\x5f\xe6\xd0\x73\xdf\x48\x50\x9b\x80\xf4\xba\x4f\x6f\x60\x47\xea\x58\xaa\xb2\xd9\x24\x74\xa1\x5c\xda\xf3\x08\xbd\x19\xd9\x73\x07\xa3\x45\x84\xc6\x6d\x8b\x71\xf4\x2f\x71\xad\x5f\x84\xce\xfe\xfe\x69\xcd\xf0\xbc\x8f\x61\x6d\xf9\x10\xce\x96\x0c\xcf\xb8\xb1\x76\x25\x74\x39\x9d\x9e\xad\x07\xfc\xf0\xa9\xfc\xa9\x1f\x54\xe5\x6f\x00\x00\x00\xff\xff\x1a\xfe\x55\x11\xa5\x04\x00\x00")

func dataPauseSvgBytes() ([]byte, error) {
	return bindataRead(
		_dataPauseSvg,
		"data/pause.svg",
	)
}

func dataPauseSvg() (*asset, error) {
	bytes, err := dataPauseSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/pause.svg", size: 1189, mode: os.FileMode(438), modTime: time.Unix(1527421328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPlayButtonSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x6f\xe3\x36\x10\x3d\xc7\xbf\x82\x65\x4f\x05\x86\x23\x0e\x87\x9f\xae\xe5\xc5\xae\x1c\x04\x01\xba\x6d\x80\x4d\x53\xf4\x14\x38\xb6\x6a\x0b\xab\x95\x0d\x4b\xb1\x9d\xfd\xf5\x05\xe5\x6c\xd1\x2e\xf2\x03\xaa\x03\xa9\x21\xdf\xbc\xf7\x66\x34\xd0\xec\xdd\xf9\x4b\x2b\x8e\xf5\xa1\x6f\x76\x5d\x29\x09\xb5\x14\x75\xb7\xda\xad\x9b\x6e\x53\xca\xa6\xdf\xa9\x18\x5d\x52\x24\xdf\xcd\x27\xb3\x1f\x94\x12\x37\x75\x57\x1f\x96\xc3\xee\x30\x15\xef\xd7\xbb\xa7\x5a\xdc\xb6\xed\x73\x3f\x8c\x47\x82\x3c\x6a\xd4\x20\x3e\x3d\xdc\x88\xeb\xf3\x7e\x77\x18\xc4\x5d\xfb\xbc\x51\xb7\x9d\xc0\xf1\xf0\xe1\x22\x34\x15\x1e\xb5\x16\x1f\x9e\x9b\x76\x2d\xf4\x4f\x42\x28\x95\xe9\x17\xbf\x55\xf7\x7f\xde\x5d\x8b\xfe\xb8\x11\x77\xbf\x7f\xf8\xe5\xb6\x12\x52\x15\xc5\x1f\x5c\x15\xc5\xe2\x7e\x31\x32\x10\x52\x51\x5c\xff\x2a\x85\xdc\x0e\xc3\x7e\x5a\x14\xa7\xd3\x09\x4f\x8c\xbb\xc3\xa6\xb8\x39\x2c\xf7\xdb\x66\xd5\x17\x9f\x1e\x6e\x8a\x0c\x5c\xdc\x2f\x8a\xfe\xb8\x21\xc2\xf5\xb0\x96\xf3\xc9\x2c\x33\x9f\xbf\xb4\x5d\x5f\xbe\x91\x6e\xb4\xd6\x19\x2e\x2f\x90\xe9\xb9\x6d\xba\xcf\x6f\x01\x29\xa5\x54\x8c\xb7\xf2\xdf\xad\x23\x29\x9a\x75\x29\xab\xe5\x7e\xf9\x48\x52\x9c\x4b\xa9\xf7\x67\x29\x5e\x5e\xf7\x53\xb3\x1e\xb6\xa5\x74\x64\x72\xb4\xad\x9b\xcd\x76\xf8\x27\x3c\x36\xf5\xe9\xc3\x2e\xa7\x08\x2d\x98\x2c\x6a\x1f\xbf\xed\x52\xf4\xc3\x4b\x5b\x97\xb2\xee\x96\x4f\x6d\xad\x9e\x96\xab\xcf\x9b\xc3\xee\xb9\x5b\x4f\xbb\xfa\x24\xde\xc8\xf8\x79\x2c\x61\xda\xef\x97\xab\xba\x94\xfb\x43\xdd\xd7\x87\x63\x9d\x1b\xb0\x99\x4f\xae\x66\x9b\xd1\xe7\xe3\x99\xf9\xd1\x79\x7c\xbc\x6b\x97\x2f\x72\x3e\xb9\xba\x1a\x6f\xaf\xae\x66\xfb\xe5\xb0\x15\xeb\x52\x7e\x34\x89\x51\x6b\x03\x21\xa2\xe3\xca\xd8\x84\xde\x7a\x60\xb4\xec\x80\x1c\xa3\xa7\xa8\x8c\x41\x93\xfc\x08\x31\x09\x0c\x65\xfd\x2a\x43\x2c\x78\x8b\xf6\x1b\x22\x02\x79\x8d\xd6\x9a\x0b\xc4\x83\x61\x87\x8e\xad\xc8\xcf\xca\x32\xb2\x83\xe0\x50\x27\x07\xc4\x09\x39\x38\x20\xad\x31\x32\x18\xb2\x68\xbd\x03\x17\xd0\x86\x8a\x49\xa3\x37\x01\x46\x33\x9c\x80\xd9\x23\x07\xba\xd8\x31\xf0\x1f\xc7\x5f\xc5\x47\x43\x09\x23\x5b\x30\xde\x61\xd4\x74\x51\x53\x5e\xa3\xf6\x01\xd8\xa2\x4f\x46\x11\x7b\x8c\xc9\x02\x59\x24\xed\x15\x05\x42\x17\xbc\xb2\x0e\x53\xe0\x8a\x18\x9d\x8f\x40\x2e\x61\xf0\x94\x73\xc8\x13\x44\x83\x89\x1d\x24\x8b\x86\xc1\x46\x34\xfe\x42\x9d\x99\x03\xa9\x91\x19\x5e\x89\xd5\x85\x18\x2e\xc4\x11\x46\x62\xaa\x58\x6b\xb4\x89\x81\x9c\x45\xd6\x01\x4c\x48\x98\x74\x6e\x0c\x21\x51\x80\xef\xac\x8f\xc5\x30\x3a\x97\x5b\xaf\xd1\x3b\xd3\xaa\x68\xd0\x90\x55\x36\x60\xb2\xe9\xb5\xb6\x80\x36\x19\x65\x91\x83\x55\x19\xcf\x4e\x69\x8c\x21\xe4\x20\xcb\x05\x0c\x31\xb5\x1a\xad\x21\x48\x0e\x29\xd8\x95\x46\xcd\x11\x22\x7a\x6f\xc1\x23\x65\x05\x83\x94\x08\x88\xd1\xfb\x04\x01\xa3\xa3\x36\x12\xba\xe8\xb2\x18\x69\x1e\xc5\x2a\x93\xbf\xa5\x49\x40\xde\xa0\x8e\x06\xc6\xd8\x66\x83\x0e\xb5\xf1\xf0\x9d\xe1\xaf\x52\xfc\xd5\xb4\x6d\x29\x7f\x4c\xb4\xa8\xdc\x7b\x59\x8c\x53\x57\x8c\x43\x99\xd7\xcb\xf2\x3f\x79\xc9\xbf\x82\xf9\xe4\xef\x00\x00\x00\xff\xff\xe0\x7c\x0d\x87\x21\x05\x00\x00")

func dataPlayButtonSvgBytes() ([]byte, error) {
	return bindataRead(
		_dataPlayButtonSvg,
		"data/play-button.svg",
	)
}

func dataPlayButtonSvg() (*asset, error) {
	bytes, err := dataPlayButtonSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/play-button.svg", size: 1313, mode: os.FileMode(438), modTime: time.Unix(1527421209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPlaySvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x6f\x6b\xdb\x30\x10\xc6\x5f\x37\x90\xef\xa0\x69\xaf\x06\xd2\xe5\x4e\x7f\x2c\x29\xad\x5b\xd6\x74\xeb\x0a\x1b\x0c\x06\x7d\x3b\xd2\x44\x73\x4d\x5d\x3b\xd8\x89\x93\xee\xd3\x0f\x39\x49\x5b\x4a\x3f\xc0\x5e\xd8\x77\x3e\xfd\xf4\xdc\x73\x07\x3e\xbb\xd8\x3d\x56\xac\x8f\x6d\x57\x36\x75\xce\x09\x90\xb3\x58\x2f\x9a\x65\x59\x17\x39\x2f\xbb\x46\x7a\x6f\x83\x24\x7e\x71\x3e\x1e\x9d\x7d\x90\x92\x5d\xc7\x3a\xb6\xf3\x75\xd3\x4e\xd9\xe7\x65\x73\x17\xd9\x4d\x55\x6d\xba\xf5\x50\x62\x14\x00\x01\x05\xfb\x75\x7b\xcd\xbe\xec\x56\x4d\xbb\x66\x3f\xab\x4d\x21\x6f\x6a\x06\x43\xf1\x76\xdf\x69\xca\x32\x40\x64\x97\x9b\xb2\x5a\x32\xfc\xc4\x98\x94\x49\xbf\xeb\x8b\xd7\x5e\x88\xb3\x72\x99\xf3\xd9\x7c\x35\xff\x4d\x9c\xed\x1e\xab\xba\xcb\xf9\xfd\x7a\xbd\x9a\x4e\x26\xdb\xed\x16\xb6\x1a\x9a\xb6\x98\x28\x44\x9c\x74\x7d\x71\x40\xa6\xbb\xaa\xac\x1f\xde\x03\x29\x84\x30\x19\x4e\x39\xdb\xe5\x1c\x57\x3b\xce\x9e\xf6\x71\x3c\x3a\x61\x7d\x19\xb7\x97\x4d\x3a\x60\xc8\x2c\xa9\xf4\x70\xd6\xad\x9f\xaa\x98\xf3\x58\xcf\xef\xaa\x28\xef\xe6\x8b\x87\xa2\x6d\x36\xf5\x72\x5a\xc7\x2d\x7b\x45\x9e\x0e\xed\xa7\xdd\x6a\xbe\x88\x39\x5f\xb5\xb1\x8b\x6d\x1f\x79\x9a\x6b\x35\x5f\xdf\x1f\x75\xfe\x94\x55\x35\xfd\x38\xfb\x7a\xe5\xaf\x66\xa7\x9c\x2d\x73\xfe\x83\xc8\x81\xd6\x5a\xe0\xbd\x72\x43\x36\x33\x36\x80\xc9\xbc\x40\x61\x49\x09\xab\xc0\x6a\x35\xa4\x07\xb4\x3f\x82\xa9\x76\x84\x8f\x31\xd5\x74\x30\x90\x65\x2e\xe5\xe3\xd1\xc9\xb7\xc3\xb5\xd9\x2b\x25\x14\x2f\x4d\x0e\xf4\xed\x11\xc3\xe7\x96\xfb\x80\xe2\xd9\xe2\x5f\x3e\x79\x7f\xa2\x0c\xdd\x95\xbf\x3c\x4c\xa4\xad\x03\xe7\x49\x28\xe3\x00\x29\x54\x92\x4c\x48\xf7\x65\xc8\x16\xd2\x40\xb0\x24\x35\x50\xd0\x92\x08\xac\x55\x92\xc0\x65\x5e\x92\x01\x67\xac\xd0\x40\x5e\x8f\x47\x27\x0b\x49\x40\x64\x05\x81\x53\x3e\x21\x98\x09\x0d\xce\x0c\x38\x6a\x61\xc1\x85\xd0\x53\x50\x0b\x89\x80\x24\x2c\xf8\x40\xc2\x80\xb3\x5e\x10\x42\xe6\xcc\x10\x4c\x18\x82\x37\x0b\x05\x68\x9d\x40\x40\xd4\xc2\x00\x3a\x89\x60\xbd\xdf\xeb\xec\x35\xab\x17\x9f\xc9\x80\x81\x90\x25\xa3\xce\x8b\x0c\x0c\x5a\x19\xc0\xb9\x64\x42\x29\x37\xb8\xd5\xd9\x4c\x67\x38\x00\xca\x78\x08\x56\x68\x1b\x00\x9d\x1b\x26\xf7\x26\x88\x37\x9b\xf8\xfe\xe6\xfb\xb0\xce\x22\xbd\x26\xc5\xff\x9d\xa6\x5f\xec\x7c\x3c\xfa\x17\x00\x00\xff\xff\xde\xc0\x52\xfe\x33\x04\x00\x00")

func dataPlaySvgBytes() ([]byte, error) {
	return bindataRead(
		_dataPlaySvg,
		"data/play.svg",
	)
}

func dataPlaySvg() (*asset, error) {
	bytes, err := dataPlaySvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/play.svg", size: 1075, mode: os.FileMode(438), modTime: time.Unix(1527421313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataRecSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\xc1\x8e\x9b\x30\x10\x86\xcf\x1b\x29\xef\x30\x9d\x9e\x2a\x81\xb1\x21\x90\x40\xd6\xbb\x6a\x48\xbb\xdd\x43\xa5\x4a\x95\x72\xad\x08\xb8\x04\xad\xd7\x20\x9b\x00\xe9\xd3\x57\x26\xb0\x4d\xa5\x3e\x40\x0f\x30\xbf\x7e\x7f\x9e\x7f\x46\xf2\xfd\xe3\xf0\x2a\xa1\x13\xda\x54\xb5\xe2\xc8\x08\x45\x10\x2a\xaf\x8b\x4a\x95\x1c\x2b\x53\xbb\x9b\x4d\x18\xbb\x0c\x1f\x1f\x96\x8b\xfb\x77\xae\x0b\x4f\x42\x09\x9d\xb5\xb5\x4e\xe0\x63\x51\x1f\x05\x3c\x4b\x79\x36\xed\x68\x01\x8b\x09\x25\xd4\x81\xef\x87\x27\xf8\x34\x34\xb5\x6e\xe1\x9b\x3c\x97\xee\xb3\x02\x32\x9a\x87\x6b\x52\x02\x11\xa1\x14\x76\xe7\x4a\x16\x40\x3f\x00\xb8\xae\xed\x6f\xba\xf2\x76\x16\x86\x50\x15\x1c\xd3\xac\xc9\x7e\x30\x84\xe1\x55\x2a\xc3\xf1\xd4\xb6\x4d\xe2\x79\x7d\xdf\x93\x3e\x20\xb5\x2e\x3d\x9f\x52\xea\x99\xae\x9c\x90\x64\x90\x95\x7a\xf9\x17\xc8\xe2\x38\xf6\xc6\x53\x84\x81\x23\x6d\x06\x84\xcb\xb5\x2e\x17\x77\xd0\x55\xa2\xdf\xd5\xf6\x00\x28\x84\xcc\xb7\x1f\x82\x69\x2f\x52\x70\x14\x2a\x3b\x4a\xe1\x1e\xb3\xfc\xa5\xd4\xf5\x59\x15\x89\x12\x3d\xdc\x90\xdb\x31\x3e\x31\x4d\x96\x0b\x8e\x8d\x16\x46\xe8\x4e\xa0\xdd\xab\xc9\xda\xd3\xdc\xe7\x67\x25\x65\xf2\x3e\xfd\xbc\xdf\xec\xd3\x2d\x42\xc1\xf1\x2b\x63\x6b\x12\x04\x81\x43\x4f\xfe\x7a\x54\xe9\x2a\x8c\xc9\x2a\xda\x38\xd4\x09\x99\xef\x84\x3e\x09\x03\x7f\x94\x13\xda\xcd\xa0\xf5\x66\x78\xae\xd6\x0b\xe2\x15\x89\xa2\xb5\xd5\xcb\xc5\xdd\x97\xe9\x5a\x7a\xd3\x89\x3a\x7f\x42\x26\xfa\x30\x63\xf4\x2d\xf2\x5a\xa8\xf3\x36\xe2\x2f\xf4\xec\x46\x79\xa5\x73\x29\xfe\xde\x29\xa2\xeb\xfd\x66\xb7\x45\xc8\x07\x8e\x7e\x18\x21\xe4\x97\x49\x68\x8e\x8c\x46\x36\xe3\x7a\xbd\xb4\x3f\xaf\xfc\xbf\xa5\x7d\x52\x0f\xcb\xc5\xef\x00\x00\x00\xff\xff\x23\xa7\x25\x94\x23\x03\x00\x00")

func dataRecSvgBytes() ([]byte, error) {
	return bindataRead(
		_dataRecSvg,
		"data/rec.svg",
	)
}

func dataRecSvg() (*asset, error) {
	bytes, err := dataRecSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/rec.svg", size: 803, mode: os.FileMode(438), modTime: time.Unix(1527421367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataRoundedPauseButtonSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\xdf\x6e\x9b\x30\x14\xc6\xaf\x9b\xa7\x38\xf3\xae\x26\xf9\xdf\x31\x71\x03\x59\x48\xb5\x26\x55\x54\x69\xdd\x2a\xa5\xcb\xb4\xab\x89\x82\x07\x56\x5d\x40\x98\x84\xb4\x4f\x3f\x99\x46\x5d\x2f\xfa\x00\x43\x32\x7c\xe7\xf0\xfb\x3e\x8e\x2d\x16\x17\xc7\x47\x07\x07\xd3\x79\xdb\xd4\x29\x41\x2e\x09\x98\x3a\x6f\x0a\x5b\x97\x29\xb1\xbe\x61\x71\xac\x13\x86\xe4\x62\x39\x59\x7c\x60\x0c\x36\xa6\x36\x5d\xd6\x37\xdd\x1c\xbe\x14\xcd\xbd\x81\x6b\xe7\xf6\xbe\x1f\x5b\x80\xe7\x5c\x72\x49\x61\xbb\xdb\xc0\xd5\xb1\x6d\xba\x1e\x6e\xdd\xbe\x64\xd7\x35\xf0\xb1\xb9\x7b\xf9\xd0\x1c\xce\xb9\x94\x70\xb9\xb7\xae\x00\xf9\x09\x80\xb1\x10\xbf\xfe\xbe\xba\xfb\x75\x7b\x05\xfe\x50\xc2\xed\x8f\xcb\xaf\xd7\x2b\x20\x4c\x88\x9f\xd1\x4a\x88\xf5\xdd\x7a\x4c\x40\x8e\x42\x5c\x7d\x23\x40\xaa\xbe\x6f\xe7\x42\x0c\xc3\xc0\x87\x88\x37\x5d\x29\x36\x5d\xd6\x56\x36\xf7\x62\xbb\xdb\x88\x00\xae\xef\xd6\xc2\x1f\x4a\x44\x5e\xf4\x05\x59\x4e\x16\x21\xf9\xf8\xe8\x6a\x9f\xbe\x63\x57\x52\xca\x80\x93\x17\x64\x7e\x74\xb6\x7e\x78\x0f\xc4\x24\x49\xc4\xf8\x96\xbc\x3d\x3a\x24\x60\x8b\x94\xac\xb2\x36\xfb\x8d\x04\x8e\x29\x91\xed\x91\xc0\xd3\xe9\x39\xd8\xa2\xaf\x52\xa2\x51\x85\xaa\x32\xb6\xac\xfa\xd7\xf2\x60\xcd\x70\xd9\x04\x0b\x48\xd0\x38\x2e\x02\xbe\x7f\x72\x26\x25\xa6\xce\xee\x9d\x61\xf7\x59\xfe\x50\x76\xcd\xbe\x2e\xe6\xb5\x19\xe0\x0d\xf9\x79\x1c\x79\xee\xdb\x2c\x37\x29\x69\x3b\xe3\x4d\x77\x30\x61\xc3\xe5\x72\x72\xb6\x28\xc7\xb9\xda\x6c\xef\x0d\xcb\x6d\x97\x3b\xc3\x9a\x7d\xef\x6c\x1d\x90\xb3\xb3\x45\x9b\xf5\x15\x14\x29\xb9\xc1\x59\xcc\x35\x8d\xf4\xac\xd2\xb8\x43\x1d\x55\x4c\xe3\x2e\xd2\xb3\x67\xb8\x51\x5a\x53\xb9\x42\x9c\xf2\x99\xa6\x92\x4a\xfa\x2a\x95\xd6\xfe\x54\x04\xe8\xb4\xbc\xd2\x9a\xfd\x6b\x33\xa5\xf5\x36\x4a\x34\x57\x27\x0b\x95\xcf\x10\xae\x31\x78\xaa\x93\x9c\x21\x2a\xae\xa8\x64\x4a\x4e\x59\x82\x3c\x1e\x85\x92\xd3\x2d\x4e\x15\x8f\xa9\xc6\xd1\xa6\xd1\x2b\x39\xa5\x01\xa0\x41\x04\x20\x3a\x9f\x71\x15\x42\xe8\x29\x2c\xcc\x1b\xcb\xf7\xb7\x42\xe0\x8f\x75\x2e\x25\x1f\xd7\xb1\x94\x6a\x46\x44\x38\x21\x51\x2e\x27\x2f\xb7\xff\x44\x84\xff\x70\x39\xf9\x1b\x00\x00\xff\xff\xf8\xd4\x33\x81\x9e\x03\x00\x00")

func dataRoundedPauseButtonSvgBytes() ([]byte, error) {
	return bindataRead(
		_dataRoundedPauseButtonSvg,
		"data/rounded-pause-button.svg",
	)
}

func dataRoundedPauseButtonSvg() (*asset, error) {
	bytes, err := dataRoundedPauseButtonSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/rounded-pause-button.svg", size: 926, mode: os.FileMode(438), modTime: time.Unix(1527421254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
	"data/pause.svg": dataPauseSvg,
	"data/play-button.svg": dataPlayButtonSvg,
	"data/play.svg": dataPlaySvg,
	"data/rec.svg": dataRecSvg,
	"data/rounded-pause-button.svg": dataRoundedPauseButtonSvg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"pause.svg": &bintree{dataPauseSvg, map[string]*bintree{}},
		"play-button.svg": &bintree{dataPlayButtonSvg, map[string]*bintree{}},
		"play.svg": &bintree{dataPlaySvg, map[string]*bintree{}},
		"rec.svg": &bintree{dataRecSvg, map[string]*bintree{}},
		"rounded-pause-button.svg": &bintree{dataRoundedPauseButtonSvg, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

